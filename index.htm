<?php
	include '../base/lc_header.php';
	include '../base/lc_util.php';
?>

<!--------------------------- Body Begin ---------------------------------------->

<div class="Section1">

<br>
<h1>◈HLSL 연습◈</h1>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>1 HLSL</span><span
style='font-size:16.0pt'>과 <span lang=EN-US>ID3DXEffect</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>1.1 </span><span
style='font-size:14.0pt'>이펙트 기초</span></p>

<p class=MsoNormal>우리는 지금까지 정점 쉐이더와 픽셀 쉐이더를 어셈블리 형식의 저 수준 쉐이더 언어를<span
lang=EN-US> C</span>언어와 같은 고 수준 언어<span lang=EN-US> HLSL</span>로 각각 독립적으로 작성해서 적용해왔습니다<span
lang=EN-US>. </span>그런데 쉐이더를 사용한다는 것은 프로그램 가능한 파이프라인을 이용하는 것을 의미하고 정점과 픽셀을 독립적으로
각각 처리하기 보다 동시에 처리하는 것을 염두 해 두는 것입니다<span lang=EN-US>. </span>물론 정점 쉐이더와 픽셀 쉐이더를
구분해서 컴파일을 하고<span lang=EN-US>, </span>독립적으로 사용하는 것이 각각 다른 그래픽 카드의 성능에 대처할 수 있는 유연성이
있어 보이지만 이것도 통합적으로 작성해서 각 상황에 맞게 처리할 수 있는 방법으로 해결하는 것이 나을 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>현재 대부분의 그래픽 카드들은 픽셀 쉐이더를 지원하는 경우라면 정점 쉐이더는 당연히 지원이 되고 프로그램에서도
픽셀 쉐이더를 분리해서 사용할 필요가 없기 때문에 이를 한꺼번에 처리하고 코드의 구현에서 좀 더 편리성을 위한 객체가 필요합니다<span
lang=EN-US>. </span>다행히도 마이크로소프트는<span lang=EN-US> Effect </span>객체를 제공합니다<span
lang=EN-US>. </span>이것은 어셈블리<span lang=EN-US> + HLSL + </span>α 이상의 내용을 담고 있어서 고정파이프라인에서
보다 다양한<span lang=EN-US> 3D </span>장면을 연출할 수 있게 해주고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=258 height=204
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image001.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;ID3DXEFfect </span>객체의 역할<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>D3D Effect</span>는 위의 그림처럼 저 수준 쉐이더와 고 수준 쉐이더를
기본적으로 지원하고 작업의 편리성을 위한 상수의 공용화<span lang=EN-US>, </span>정점 처리 상태 설정<span
lang=EN-US>, </span>픽셀 처리 상태 설정 등의 옵션<span lang=EN-US>(Option) </span>들이 추가된 형태입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>기본적인 문법은 이전의 저 수준<span lang=EN-US>, </span>고 수준과 같고 정점 처리와 픽셀
처리는 각각 작성하고 컴파일방법을 지정합니다<span lang=EN-US>. <a href="https://github.com/3dapi/dv16_shader3/raw/master/ef01_basic1_hlsl1.zip">ef01_basic1_hlsl1.zip</a>
</span>예제의 <span lang=EN-US>“data/hlsl.fx” </span>파일은<span lang=EN-US>
ID3DXEffect</span>를 위한 쉐이더이며 코드를 보면 정점과 픽셀 처리의<span lang=EN-US> main </span>함수 작성은
이전에 배운<span lang=EN-US> HLSL</span>과 동일하고 마지막에 <span lang=EN-US>“technique”</span>과
<span lang=EN-US>“pass”</span>안에서 컴파일을 지정하고 있음을 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>키워드<span lang=EN-US> &quot;technique&quot; </span>은 정점과 픽셀 처리에
대한 단위이고<span lang=EN-US>, &quot;pass&quot;</span>는 정점 처리와 픽셀 처리의<span
lang=EN-US> main </span>함수와 렌더링의 상태 설정입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>하나의 테크닉은 여러 패스를 가질 수 있고<span lang=EN-US>, </span>전체 쉐이더 코드는 여러
개의 테크닉을 가질 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR style='color:blue'>technique</span><span
lang=FR> Tech0</span></p>

<p class=MsoNormal><span lang=FR>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:blue'>pass</span><span lang=FR> P0</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:blue'>VertexShader</span><span lang=FR> = </span><span
lang=FR style='color:blue'>compile</span><span lang=FR> </span><span lang=FR
style='color:blue'>vs_1_1</span><span lang=FR> </span><span lang=FR
style='color:#880000'>VtxPrc</span><span lang=FR>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:blue'>PixelShader</span><span lang=FR>&nbsp; = </span><span
lang=FR style='color:blue'>compile</span><span lang=FR> </span><span lang=FR
style='color:blue'>ps_1_1</span><span lang=FR> </span><span lang=FR
style='color:#880000'>PxlPrc</span><span lang=FR>();</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pass
P1</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; …</span></p>

<p class=MsoNormal><span lang=FR>}</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;</span></p>

<p class=MsoNormal><span lang=FR style='color:blue'>technique</span><span
lang=FR> Tech1</span></p>

<p class=MsoNormal><span lang=FR>{</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 여러 개의<span lang=EN-US> Pass</span>와<span lang=EN-US>
Technique</span>의 지원은 패스에서 여러 개의 쉐이더 함수를 조합해서 하나의 패스를 만들고<span lang=EN-US>, </span>이를
테크닉은 여러 패스를 설정 할 수 있어서 단순한<span lang=EN-US> HLSL</span>보다 조합에 의한 다양한 연출을 실행 프로그램에서
만들지 않고 쉐이더 언어를 작성하는 곳에서 결정을 할 수 있게 됩니다<span lang=EN-US>. </span>또한 반복적인 쉐이더 내용을
분리해 작성할 수 있어서 모듈의 응집력이 높아집니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 작성된 고 수준 쉐이더 언어는<span lang=EN-US> D3DXCreateEffect…() </span>함수로
컴파일 하며 컴파일과 동시에<span lang=EN-US> ID3DXEffect </span>객체를 생성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>D3DXCreateEffectFromFile</span><span
lang=EN-US>( m_pd3dDevice, </span><span lang=EN-US style='color:fuchsia'>&quot;data/hlsl.fx&quot;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, dwFlags, </span><span
lang=EN-US style='color:#A000A0'>NULL</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
&amp;m_pEft, &amp;pErr);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>HLSL, </span>쉐이더와 차이점은 컴파일과 동시에 이펙트 객체를 생성하고
있고<span lang=EN-US>, </span>상수 테이블을 만들지 않고 있습니다<span lang=EN-US>. </span>나머지 에러에
대한 처리는 저수준 쉐이더<span lang=EN-US>, HLSL</span>과 동일합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>ID3DXEffect </span>객체는 내부에 상수를 설정할 수 있도록 구성되어
있으며 인터페이스는 상수 테이블에서 사용한 함수들을 그대로 사용할 수 있고 <span lang=EN-US>Technique, Pass, </span>텍스처에
대한 인터페이스가 추가되어 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>ID3DXEffect</span>로 장면을 연출하는 과정은 <span
lang=EN-US>SetVector(), SetMatrix(), SetInt() </span>등의 함수로 상수를 설정하고<span
lang=EN-US>, SetTechnique()</span>함수로 <span lang=EN-US>Technique</span>을 지정합니다<span
lang=EN-US>. </span>다음으로<span lang=EN-US> Begin()</span>함수를 이용해서 <span
lang=EN-US>Pass </span>개수 확인합니다<span lang=EN-US>. </span>마지막으로<span lang=EN-US>
Pass()(2003</span>버전<span lang=EN-US>), </span>또는<span lang=EN-US> BeginPass()
/ EndPass()(2003 </span>이후 버전<span lang=EN-US>) </span>함수 사이에 장면 연출 함수<span
lang=EN-US> Draw…()</span>를 호출합니다<span lang=EN-US>. Pass(), BeginPass() </span>함수는<span
lang=EN-US> Pass</span>안에 구성된 정점 쉐이더와 픽셀 쉐이더 객체 사용을 지정하는 것과 같습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>구체적으로 각 단계에 대한 예를 보이겠습니다<span lang=EN-US>. </span>먼저 행렬<span
lang=EN-US>, </span>벡터 등의 상수 값들은 상수 테이블에서 사용했던 방식 그대로 다음과 같이 사용합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>m_pEft-&gt;</span><span lang=EN-US
style='color:#880000'>SetMatrix</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;m_mtWld&quot;</span><span lang=EN-US>,
&amp;mtWld);</span></p>

<p class=MsoNormal><span lang=EN-US>m_pEft-&gt;</span><span lang=EN-US
style='color:#880000'>SetMatrix</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;m_mtViw&quot;</span><span lang=EN-US>,
&amp;mtViw);</span></p>

<p class=MsoNormal><span lang=EN-US>m_pEft-&gt;</span><span lang=EN-US
style='color:#880000'>SetMatrix</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;m_mtPrj&quot;</span><span lang=EN-US>,
&amp;mtPrj);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Pass</span>들의 집합인 <span lang=EN-US>Technique</span>을<span
lang=EN-US> SetTechique() </span>함수로 지정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>m_pEft-&gt;</span><span lang=EN-US
style='color:#880000'>SetTechnique</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;Tech0&quot;</span><span lang=EN-US>); </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음으로 <span lang=EN-US>Technique</span>에 지정된<span lang=EN-US>
Pass</span>의 숫자를 <span lang=EN-US>Begin()</span>함수로 얻습니다<span lang=EN-US>. Pass</span>의
개수가 필요 없다면<span lang=EN-US> NULL </span>값을 전달합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>m_pEft-&gt;</span><span lang=EN-US
style='color:#880000'>Begin</span><span lang=EN-US>( &amp;nPass, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> );&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// m_pEft-&gt;Begin(NULL, 0 );</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>m_pEft-&gt;</span><span lang=EN-US
style='color:#880000'>End</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Begin() </span>함수는<span lang=EN-US> End()</span>함수와
반드시 짝을 이루어야 합니다<span lang=EN-US>. </span>마지막으로 <span lang=EN-US>Begin()/End()</span>함수
사이에 다음과 같이<span lang=EN-US> for </span>문 또는 직접 인덱스를 사용해서<span lang=EN-US>
Pass() </span>함수<span lang=EN-US> (2003 </span>이후 버전<span lang=EN-US>
BeginPass() / EndPass()) </span>아래에<span lang=EN-US> Draw…() </span>함수를 호출합니다<span
lang=EN-US>. Pass(), </span>또는<span lang=EN-US> BeginPass()/EndPass() </span>함수는
<span lang=EN-US>Technique </span>안의<span lang=EN-US> Pass</span>에 지정된 정점 쉐이더와 픽셀
쉐이더 사용을 지정하는 것과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=PT-BR style='color:blue'>for</span><span
lang=PT-BR>(</span><span lang=PT-BR style='color:blue'>UINT</span><span
lang=PT-BR> n = </span><span lang=PT-BR style='color:red'>0</span><span
lang=PT-BR>; n &lt; nPass; ++n)</span></p>

<p class=MsoNormal><span lang=PT-BR>{</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pEft-&gt;</span><span
lang=PT-BR style='color:#880000'>Pass</span><span lang=PT-BR>( n </span><span
lang=PT-BR style='color:green'>);// 2003 </span><span style='color:green'>이후 버전<span
lang=PT-BR> m_pEft-&gt;BeginPass()</span></span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=PT-BR style='color:#880000'>DrawPrimitiveUP</span><span lang=PT-BR>( </span><span
lang=PT-BR style='color:#A000A0'>D3DPT_TRIANGLELIST</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:red'>1</span><span lang=PT-BR>, m_pVtx, </span><span
lang=PT-BR style='color:blue'>sizeof</span><span lang=PT-BR>(</span><span
lang=PT-BR style='color:blue'>VtxD</span><span lang=PT-BR>));</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// m_pEft-&gt;EndPass(); // 2003 </span><span
style='color:green'>이후</span><span style='color:green'> </span><span
style='color:green'>버전</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>m_pEft-&gt;</span><span lang=EN-US
style='color:#880000'>End</span><span lang=EN-US>(); //m_pEft-&gt;Begin() </span>과
대응</p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>End()</span>함수를 호출하면 정점 쉐이더<span
lang=EN-US>, </span>픽셀 쉐이더 사용이 끝나야 되는데 간혹 그래픽 카드에서 처리되지 않을 수 있습니다<span
lang=EN-US>. </span>다음과 같이 명시적으로 쉐이더 사용을 해제합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetVertexShader</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetPixelShader</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=243 height=183
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image002.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>간단한<span lang=EN-US> ID3DXEffect
</span>사용<span lang=EN-US>: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ef01_basic1_hlsl1.zip">ef01_basic1_hlsl1.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>1.2 Multi-Techniques</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>1.2.1 Effect</span><span
style='font-size:12.0pt'>의 상태 설정과 저 수준 쉐이더</span></p>

<p class=MsoNormal><span lang=EN-US>Pass</span>는 렌더링 처리과정의 가장 기본 단위이며 보통<span
lang=EN-US> Pass</span>안에 정점 쉐이더 또는 픽셀 쉐이더 객체를 지정합니다<span lang=EN-US>. </span>그런데
쉐이더 객체를 지정하지 않으면 고정 기능 파이프라인의 정점 처리<span lang=EN-US>, </span>픽셀 처리<span
lang=EN-US>, </span>그리고 기타 렌더링 머신 값을 설정 하게 됩니다<span lang=EN-US>. </span>이러한 이점은
다양한 렌더링 환경에 대해서 게임 프로그래머가 특별한 자료 구조를 안 만들어도 되며 범용성이 있어서 다른 게임 프로그램에도 수정 없이 적용할 수
있게 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>technique</span><span lang=EN-US> Tech0</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>pass</span><span lang=EN-US> P0</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Setup Vertex Processing Constant of Rendering
Machine</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FOGENABLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:#A000A0'>FALSE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LIGHTING&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:#A000A0'>FALSE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CULLMODE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:#A000A0'>CCW</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Setup Vertex Processing Constant of Rendering
Machine</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sampler[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>]&nbsp;&nbsp;&nbsp;&nbsp; =
(SmpDif0);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ColorOp[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>]&nbsp;&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:#A000A0'>ADDSIGNED</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ColorArg1[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>]&nbsp;&nbsp; = </span><span
lang=EN-US style='color:#A000A0'>TEXTURE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ColorArg2[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>]&nbsp;&nbsp; = </span><span
lang=EN-US style='color:#A000A0'>DIFFUSE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AlphaOp[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>]&nbsp;&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:#A000A0'>DISABLE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ColorOp[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>]&nbsp;&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:#A000A0'>DISABLE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>pass</span><span lang=EN-US> P1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=182 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image003.jpg">&nbsp;<img border=0 width=182 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image004.jpg">&nbsp;<img border=0 width=182 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image005.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt; </span>고정 기능 파이프라인의 상태 값 설정<span
lang=EN-US>: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ef01_basic1_hlsl2.zip">ef01_basic1_hlsl2.zip</a> - </span>숫자<span
lang=EN-US> 1, 2, 3 </span>키<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>D3DX</span>의<span lang=EN-US> Effect</span>는
<span lang=EN-US>C </span>언어의<span lang=EN-US> inline assembly </span>와 같이 저 수준과
고 수준 언어를 혼용해서 사용할 수 있습니다<span lang=EN-US>. C </span>언어는 함수의 중간에<span
lang=EN-US> __asm </span>키워드를 사용해서<span lang=EN-US> inline assembly</span>를 종속적으로
구현하지만<span lang=EN-US> Effect</span>는 정점 쉐이더<span lang=EN-US>(Vertex Shader) </span>객체<span
lang=EN-US>, </span>픽셀 쉐이더<span lang=EN-US>(PixelShader) </span>객체를 독립적으로 작성하고 이를<span
lang=EN-US> Pass</span>안에서 지정 하는 형태입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>저 수준 쉐이더를<span lang=EN-US> Effect</span>에서 작성하는 방법은 크게<span
lang=EN-US> 2</span>가지 입니다<span lang=EN-US>. </span>첫 번째 방법은 다음과 같이<span
lang=EN-US> technique </span>밖에서 정점 쉐이더<span lang=EN-US>, </span>또는 픽셀 쉐이더를 작성하고<span
lang=EN-US> pass </span>안에서 지정하는 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4x4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_mtWVP;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>월드<span
lang=EN-US> * </span>뷰<span lang=EN-US> * </span>투영 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3x3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_mtWld;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>월드 행렬</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>float3</span><span
lang=EN-US>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_vcLgt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>광원 방향 벡터</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>정점 처리의 저 수준 작성</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>VertexShader</span><span
lang=EN-US> VtxPrc = </span><span lang=EN-US style='color:blue'>asm</span></p>

<p class=MsoNormal><span lang=FR>{</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:blue'>vs_1_1</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:blue'>dcl_position</span><span lang=FR>&nbsp; </span><span
lang=FR style='color:blue'>v0</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:blue'>dcl_normal</span><span lang=FR>&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:blue'>v1</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>dcl_texcoord</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:blue'>v2</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>m4x4</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>oPos</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>v0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>c0</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:#A000A0'>m3x3</span><span lang=PT-BR> </span><span
lang=PT-BR style='color:blue'>r0</span><span lang=PT-BR>,&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>v1</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>c4</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:#A000A0'>dp3</span><span lang=PT-BR>&nbsp; </span><span
lang=PT-BR style='color:blue'>r1</span><span lang=PT-BR>,&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>r0</span><span lang=PT-BR>,-</span><span
lang=PT-BR style='color:blue'>c8</span></p>

<p class=MsoNormal><span lang=PT-BR>…</span></p>

<p class=MsoNormal><span lang=PT-BR>};</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:green'>// Pixel Processing</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>PixelShader</span><span lang=PT-BR> PxlPrc = </span><span
lang=PT-BR style='color:blue'>asm</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>ps_2_0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>…</span></p>

<p class=MsoNormal><span lang=PT-BR>};</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>technique</span><span
lang=EN-US> Tech0</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>pass</span><span lang=EN-US> P0</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>저 수준 쉐이더에 상수
연결</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:blue'>VertexShaderConstant4</span><span lang=FR>[</span><span
lang=FR style='color:red'>0</span><span lang=FR>]&nbsp; = (m_mtWVP);</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:blue'>VertexShaderConstant4</span><span lang=FR>[</span><span
lang=FR style='color:red'>4</span><span lang=FR>]&nbsp; = (m_mtWld);</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:blue'>VertexShaderConstant1</span><span lang=FR>[</span><span
lang=FR style='color:red'>8</span><span lang=FR>]&nbsp; = (m_vcLgt);</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:green'>// </span><span style='color:green'>정점</span><span
style='color:green'> </span><span style='color:green'>쉐이더</span><span
style='color:green'> </span><span style='color:green'>객체</span><span
style='color:green'> </span><span style='color:green'>지정</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:blue'>VertexShader</span><span lang=FR> = (VtxPrc);</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:green'>// </span><span style='color:green'>픽셀</span><span
style='color:green'> </span><span style='color:green'>쉐이더</span><span
style='color:green'> </span><span style='color:green'>객체</span><span
style='color:green'> </span><span style='color:green'>지정</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:blue'>PixelShader</span><span lang=FR> = (VtxPrc);</span></p>

<p class=MsoNormal><span lang=FR>…</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=241 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image006.jpg"></span><span lang=EN-US>&nbsp;</span><span
lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image007.jpg"></span></p>

<p class=MsoNormal><span lang=FR>&lt;Effect </span>안에서 저 수준 쉐이더<span lang=FR>1:
<a href="https://github.com/3dapi/dv16_shader3/raw/master/ef01_basic2_asm1_1.zip">ef01_basic2_asm1_1.zip</a>, <a
href="https://github.com/3dapi/dv16_shader3/raw/master/ef01_basic2_asm1_2.zip">ef01_basic2_asm1_2.zip</a> &gt;</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;</span></p>

<p class=MsoNormal>저수준 안에서 사용되는 상수는<span lang=EN-US> pass</span>에서<span
lang=EN-US> VertexShaderConstant{1….4}[index], PixelShaderConstant{1….4}[index]
</span>등으로 지정합니다<span lang=EN-US>. </span>예를 들어<span lang=EN-US> 4x4</span>행렬을 상수
레지스터<span lang=EN-US> c10</span>에 연결하고자 한다면<span lang=EN-US> VertexShader4[10]
= &quot;</span>행렬<span lang=EN-US>&quot;; </span>식으로 작성합니다<span lang=EN-US>. </span>상수
연결과 고정 기능 파이프라인의 연결은 <span lang=EN-US>SDK </span>도움말의 <span lang=EN-US>Effect
States </span>부분을 살펴 보기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>저 수준 쉐이더를 사용하는 두 번째 방법은<span lang=EN-US> pass</span>안에 직접 작성하는
것입니다<span lang=EN-US>. </span>상수 설정 등의<span lang=EN-US> Effect</span>의 상태는 이전과 동일합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp; m_cv[</span><span
lang=EN-US style='color:red'>6</span><span lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 변환 행렬과 텍스처
애니메이션 좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp; m_cp[</span><span
lang=EN-US style='color:red'>8</span><span lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>픽셀 쉐이더 상수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>technique</span><span lang=EN-US> Tech0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>pass</span><span lang=EN-US> P0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:blue'>VertexShaderConstant1</span><span lang=FR>[</span><span
lang=FR style='color:red'>0</span><span lang=FR>] = (m_cv[</span><span lang=FR
style='color:red'>0</span><span lang=FR>]);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:blue'>PixelShaderConstant1</span><span lang=FR>[</span><span
lang=FR style='color:red'>0</span><span lang=FR>]&nbsp; = (m_cp[</span><span
lang=FR style='color:red'>0</span><span lang=FR>]);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=DE style='color:blue'>VertexShader</span><span lang=DE> = </span><span
lang=DE style='color:blue'>asm</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=DE style='color:blue'>vs_1_1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=DE style='color:blue'>PixelShader</span><span lang=DE> = </span><span
lang=DE style='color:blue'>asm</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>ps_1_4</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image008.jpg">&nbsp;<img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image009.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt; Effect </span>안에서 저 수준 쉐이더<span
lang=EN-US>2: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ef01_basic2_asm2_1.zip">ef01_basic2_asm2_1.zip</a>, <a
href="https://github.com/3dapi/dv16_shader3/raw/master/ef01_basic2_asm2_2.zip">ef01_basic2_asm2_2.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>지금까지의 내용을 종합해 보면<span lang=EN-US> technique</span>은 렌더링 상태 머신
값을 설정하고<span lang=EN-US>, </span>특히 쉐이더 객체가 지정되지 않으면 고정 기능 파이프라인의 상태 값을 조정할 수 있습니다<span
lang=EN-US>. </span>또한 고 수준으로 작성된<span lang=EN-US> HLSL</span>과 저 수준으로 작성된 쉐이더를
연결해서 사용할 수 있습니다<span lang=EN-US>. </span>또한<span lang=EN-US>, </span>고정 기능<span
lang=EN-US>, </span>저 수준<span lang=EN-US>, </span>고 수준 모두를 혼합해서 사용이 가능합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>다음은 간단하게 저 수준과<span lang=EN-US> HLSL</span>을 혼합한 예입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=244 height=184
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image010.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>저 수준<span lang=EN-US>, HLSL</span>을
혼합해서 사용한 예<span lang=EN-US>: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ef01_basic3_hlsl+asm.zip">ef01_basic3_hlsl+asm.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>1.2.2</span><span
 lang=EN-US style='font-size:12.0pt'> Multi-pass</span></p>

<p class=MsoNormal>앞서 <span lang=EN-US>DX</span>의<span lang=EN-US> Effect</span>는
하나의 <span lang=EN-US>Technique</span>에 여러<span lang=EN-US> Pass</span>를 가질 수 있다고
했습니다<span lang=EN-US>. </span>이것을<span lang=EN-US> Multi-pass</span>라 합니다<span
lang=EN-US>. Multi-pass</span>를 사용하면 같은 렌더링 물체에 대해서 서로 다른 렌더링 환경을 가지고 연속해서 그리는 상황에
대해서 여러 편리한 점이 많습니다<span lang=EN-US>. </span>고정 기능 파이프라인에서 <span lang=EN-US>Multi-pass</span>와
같은 내용을 구현하려면 코드가 길어지고<span lang=EN-US>, </span>길어진 길이만큼 관리하기가 점점 어려워집니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>예를 들어<span lang=EN-US> HLSL </span>기초의<span lang=EN-US> Glow
</span>효과는 렌더링 상태 값을 변경해 가면서 <span lang=EN-US>CW, CCW </span>방식으로 같은 물체를 두 번 렌더링으로
만든 효과인데 <span lang=EN-US>HLSL</span>을 사용하더라도 상태 설정 등은<span lang=EN-US> D3D </span>디바이스의
고정 기능 함수들을 사용했었습니다<span lang=EN-US>.&nbsp; </span>그런데 <span lang=EN-US>Effect</span>를
사용하면 다음과 같이<span lang=EN-US> Pass</span>안에서 지정하고<span lang=EN-US> Effect </span>객체를
사용하는<span lang=EN-US> C/C++ </span>은<span lang=EN-US> Pass</span>의 숫자를 확인해서 단순히
이들 <span lang=EN-US>Pass</span>들을 렌더링 하는 방식이 구성되어 코드의 훨씬 간결하게 됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>technique</span><span lang=EN-US> Tech0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Effect Technique</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>pass</span><span lang=EN-US> P0 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>모델 렌더링</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CULLMODE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
NONE;</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VertexShader</span><span lang=EN-US> = </span><span
lang=EN-US style='color:blue'>compile</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>vs_1_1</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>VtxPrc0</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>PixelShader</span><span lang=EN-US>&nbsp; = </span><span
lang=EN-US style='color:blue'>compile</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>ps_1_1</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>PxlPrc0</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>pass</span><span lang=EN-US> P1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Glow </span><span style='color:green'>렌더링</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CULLMODE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
CW;</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VertexShader</span><span lang=EN-US> = </span><span
lang=EN-US style='color:blue'>compile</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>vs_1_1</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>VtxPrc1</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE style='color:green'>//
C++</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE style='color:blue'>void</span><span
lang=DE> </span><span lang=DE style='color:blue'>CShaderEx</span><span lang=DE>::</span><span
lang=DE style='color:#880000'>Render</span><span lang=DE>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>상수 연결</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr
= m_pEft-&gt;</span><span lang=EN-US style='color:#880000'>SetMatrix</span><span
lang=EN-US>(</span><span lang=EN-US style='color:fuchsia'>&quot;m_mtWld&quot;</span><span
lang=EN-US>, &amp;m_mtWld);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Technique </span><span style='color:green'>지정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr
= m_pEft-&gt;</span><span lang=EN-US style='color:#880000'>SetTechnique</span><span
lang=EN-US>(</span><span lang=EN-US style='color:fuchsia'>&quot;Tech0&quot;</span><span
lang=EN-US>); </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Pass </span><span style='color:green'>개수 확인</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>UINT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; nPass=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr
= m_pEft-&gt;</span><span lang=EN-US style='color:#880000'>Begin</span><span
lang=EN-US>( &amp;nPass, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Pass </span><span style='color:green'>수 만큼 같은
물체를 렌더링</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>for</span><span lang=PT-BR>(</span><span
lang=PT-BR style='color:blue'>UINT</span><span lang=PT-BR> n = </span><span
lang=PT-BR style='color:red'>0</span><span lang=PT-BR>; n &lt; nPass; ++n)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#if </span><span lang=EN-US style='color:#A000A0'>D3DX_SDK_VERSION</span><span
lang=EN-US> &gt;</span><span lang=EN-US style='color:red'>21</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr
= m_pEft-&gt;</span><span lang=EN-US style='color:#880000'>BeginPass</span><span
lang=EN-US>( n );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#else</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr
= m_pEft-&gt;</span><span lang=EN-US style='color:#880000'>Pass</span><span
lang=EN-US>( n );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#endif</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr
= m_pDev-&gt;</span><span lang=EN-US style='color:#880000'>DrawPrimitiveUP</span><span
lang=EN-US>( </span><span lang=EN-US style='color:#A000A0'>D3DPT_TRIANGLESTRIP</span><span
lang=EN-US>, …);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#if </span><span lang=EN-US style='color:#A000A0'>D3DX_SDK_VERSION</span><span
lang=EN-US> &gt;</span><span lang=EN-US style='color:red'>21</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr
= m_pEft-&gt;EndPass();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#endif</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr
= m_pEft-&gt;</span><span lang=EN-US style='color:#880000'>End</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=181 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image011.gif">&nbsp;<img border=0 width=181 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image012.gif">&nbsp;<img border=0 width=182 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image013.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>법선 벡터를 이용한 효과<span lang=EN-US>: <a
href="https://github.com/3dapi/dv16_shader3/raw/master/ef02_pass1_glow1.zip">ef02_pass1_glow1.zip</a>, <a
href="https://github.com/3dapi/dv16_shader3/raw/master/ef02_pass1_glow2.zip">ef02_pass1_glow2.zip</a>, <a
href="https://github.com/3dapi/dv16_shader3/raw/master/ef02_pass1_laser.zip">ef02_pass1_laser.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이처럼<span lang=EN-US> Multi-Pass</span>의 사용은 코드를 간결하게 만들고 제어를<span
lang=EN-US> Effect</span>에서 작성이 되어 게임의 기본 골격은 프로그래머가 만들고 효과에 대한 처리와 상태 값들은 쉐이더 언어를
알고 있는 기획자가 만들게 되어 전체적인 게임의 연출의 완성도가 높아지고 작업 또한 적절히 분배 되는 장점이 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>현재의 그래픽 카드들은 한번의 렌더링에 대한 속도가 모니터의<span lang=EN-US> Hz</span>보다
높게 나오는 것이 많습니다<span lang=EN-US>. </span>사람의 눈은<span lang=EN-US> 24~30 </span>프레임
정도이기 때문에 고성능 그래픽 카드에서 같은 물체를 다른 환경에서 반복적으로 렌더링 해서 시각적 효과를 높이는 방법이 많이 사용되고 있습니다<span
lang=EN-US>. </span>부드러운 그림자<span lang=EN-US>, Post Effect </span>등은 대표적으로 같은 물체를
반복해서 만드는 예이며 이들은 다음 과정에서 다시 살펴 보겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>간단하게 <span lang=EN-US>Multi-Pass</span>를 사용해서<span
lang=EN-US> Post Effect</span>의 하나인<span lang=EN-US> Blur </span>효과를 구현해 보겠습니다<span
lang=EN-US>. Blur </span>효과는 이후 과정에도 나오지만 인접한 픽셀에 가중치를 주고 이 가중치를 인접한 픽셀에 곱한 다음 전부
더해서 최종 색상을 정하는 방법입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i><span lang=EN-US>Blur </span>효과 최종 색상<span lang=EN-US> = <sub><img
border=0 width=96 height=51 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image014.gif"></sub></span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 장면을 저장한 텍스처를 사용하기 때문에 정점의 형식은<span lang=EN-US> RHW</span>를
사용하거나 뷰 행렬과 투영 행렬을 사용하게 되어 정점 처리에 대한 쉐이더는 입력 값을 그대로 출력으로 사용하게 되어 다음과 같이 간단한 쉐이더로
작성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>VertexShader</span><span lang=EN-US> VtxPrc = </span><span
lang=EN-US style='color:blue'>asm</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>vs_1_1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>dcl_position</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>v0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>dcl_color0</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>v1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>dcl_texcoord</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>v2</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>mov </span><span lang=EN-US style='color:blue'>oPos</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>v0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>mov</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>oD0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>v1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>mov</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>oT0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>v2</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>생동감 있는<span lang=EN-US> Blur </span>효과를 만들기 위해서 먼저 전체 장면을 저장한
텍스처를 그대로 화면에 그리는데 절반<span lang=EN-US>(1/2)</span>으로 낮추어서 그립니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlPrc0</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> Dif : </span><span
lang=EN-US style='color:blue'>COLOR0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US> Tx0 : </span><span
lang=EN-US style='color:blue'>TEXCOORD0</span><span lang=EN-US>) : </span><span
lang=EN-US style='color:blue'>COLOR</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>&nbsp; Out= </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(sampTex, Tx0);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out&nbsp;&nbsp;&nbsp;&nbsp; *=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음으로 장면을 저장한 텍스처에<span lang=EN-US> Blur </span>효과를 적용합니다<span
lang=EN-US>. </span>가중치<span lang=EN-US>(weight: w)</span>는<span lang=EN-US>
Gaussian </span>분포 함수<span lang=EN-US>(I * exp( - x*x/delta))</span>를 사용하게 되어 쉐이더의<span
lang=EN-US> exp() </span>함수를 이용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// Blur </span><span style='color:green'>효과</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlPrc1</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> Dif : </span><span
lang=EN-US style='color:blue'>COLOR0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US> Tx0 : </span><span
lang=EN-US style='color:blue'>TEXCOORD0</span><span lang=EN-US>) : </span><span
lang=EN-US style='color:blue'>COLOR</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>int </span><span lang=EN-US>i=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; </span><span
lang=EN-US style='color:blue'>int </span><span lang=EN-US>iMax=</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>; </span><span
lang=EN-US style='color:blue'>float4 </span><span lang=EN-US>Out= </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>인접한 픽셀에 가중치를
주고 이들을 더함</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>먼저<span
lang=EN-US> x </span>방향으로<span lang=EN-US> Blur</span>효과 적용</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(i=-iMax; i&lt;=iMax;
++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US> Tx = Tx0;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tx.x&nbsp;&nbsp;&nbsp; +=
(i *m_fDeviation)/</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>.f;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>&nbsp; d = </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(sampTex, Tx);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Gaussian </span><span style='color:green'>분포 함수<span
lang=EN-US> f(x) = I * exp( - x*x/delta)</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; e = i*i;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e
= -e/</span><span lang=PT-BR style='color:red'>16</span><span lang=EN-US>.</span><span
lang=PT-BR style='color:red'>0f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
+= d * </span><span lang=PT-BR style='color:red'>1</span><span lang=EN-US>.</span><span
lang=PT-BR style='color:red'>0f</span><span lang=EN-US>* </span><span
lang=PT-BR style='color:#880000'>exp</span><span lang=EN-US>( e );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// y </span><span style='color:green'>방향으로<span
lang=EN-US> Blur</span>효과 적용</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(i=-iMax; i&lt;=iMax;
++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US> Tx = Tx0;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tx.y&nbsp;&nbsp;&nbsp; +=
(i *m_fDeviation)/</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>&nbsp; d = </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(sampTex, Tx);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; e = i*i;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e
= -e/</span><span lang=PT-BR style='color:red'>16</span><span lang=EN-US>.</span><span
lang=PT-BR style='color:red'>0f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
+= d * </span><span lang=PT-BR style='color:red'>1</span><span lang=EN-US>.</span><span
lang=PT-BR style='color:red'>0f</span><span lang=EN-US>* </span><span
lang=PT-BR style='color:#880000'>exp</span><span lang=EN-US>( e );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Technique</span>에서 <span lang=EN-US>Blur </span>효과를
적용하는 <span lang=EN-US>Pass</span>는<span lang=EN-US> Alpha Blending</span>을 활성화하고<span
lang=EN-US> Source</span>와<span lang=EN-US> Dest</span>는 전부<span lang=EN-US>
ONE</span>으로 설정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR style='color:blue'>technique</span><span
lang=FR> Tech</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>pass</span><span lang=EN-US> P1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AlphablendEnable=
TRUE;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SRCBLEND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
ONE;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DESTBLEND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
ONE;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:blue'>VertexShader</span><span lang=FR> = (</span><span
lang=FR style='color:#880000'>VtxPrc</span><span lang=FR>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:blue'>PixelShader</span><span lang=FR>&nbsp; = </span><span
lang=FR style='color:blue'>compile</span><span lang=FR> </span><span lang=FR
style='color:blue'>ps_2_0</span><span lang=FR> </span><span lang=FR
style='color:#880000'>PxlPrc1</span><span lang=FR>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image015.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>인접 픽셀을 이용한 <span lang=EN-US>Blur
</span>효과<span lang=EN-US>: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ef02_pass2_blur.zip">ef02_pass2_blur.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/dv16_shader3/raw/master/ef02_pass2_blur.zip">ef02_pass2_blur.zip</a></span>를
실행하면 시간에 대해서<span lang=EN-US> Blur </span>효과가 동적으로 적용되는 것을 볼 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>1.3 2D Sprite</span></p>

<p class=MsoNormal><span lang=EN-US>HLSL</span>이나<span lang=EN-US> Effect</span>는<span
lang=EN-US> D3D</span>에서도 고급 내용이기 때문에 처음에는 익숙하지 않을 수 있습니다<span lang=EN-US>. 3D </span>프로그램은
게임 제작 등을 통해서 개인의 실력이 발전하는데 프로젝트가 준비 되지 않고 공부 하는 과정이라면<span lang=EN-US> Effect</span>를
연습하기 위해<span lang=EN-US> 2D </span>게임에 대한<span lang=EN-US> Sprite</span>를<span
lang=EN-US> Effect</span>로 만드는 것을 추천합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>DX 10</span>이상은 쉐이더가 기본입니다<span lang=EN-US>.
Embedded </span>환경에서 대부분 사용되는<span lang=EN-US> OpenGL ES</span>는 버전<span
lang=EN-US> 2.0</span>부터<span lang=EN-US> GLSL</span>를 사용하고<span lang=EN-US>
GLSL</span>은<span lang=EN-US> HLSL</span>과 많이 비슷합니다<span lang=EN-US>. </span>따라서<span
lang=EN-US> 2D </span>게임을 위한<span lang=EN-US> Sprite</span>를<span lang=EN-US>
Effect</span>로 작성하는 것은 꼭 필요한 일이라 할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>ID3DXSprite</span>는 크기<span lang=EN-US>, </span>회전<span
lang=EN-US>, </span>이동<span lang=EN-US>, </span>색상을 설정할 수 있는<span lang=EN-US>
Sprite</span>입니다<span lang=EN-US>. </span>여기에 단색화를 추가한<span lang=EN-US>Sprite</span>를
쉐이더와<span lang=EN-US> Effect</span>로 구성해 봅시다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>먼저 입력 값들을 다음과 같이 단색화<span lang=EN-US>, </span>색상 적용 값<span
lang=EN-US>, </span>텍스처 샘플러를 지정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; m_bMono;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>단색화 사용</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp; m_Diff;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>색상 값</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> smp0 : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>s0</span><span lang=EN-US>);&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>샘플러</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>만약 <span lang=EN-US>Sprite</span>의 정점이<span lang=EN-US> RHW</span>로
구성되어 있다면 정점 처리 과정은 특별히 처리할 일이 없으므로 입력 값을 그대로 출력하도록 작성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>VertexShader</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>VtxProc</span><span lang=EN-US> = asm&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 처리<span
lang=EN-US>: </span>입력 값을 그대로 출력</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>vs_1_1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>dcl_position</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:blue'>v0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>dcl_texcoord</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:blue'>v1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>mov</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>oPos</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>v0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>mov</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>oT0</span><span lang=EN-US> , </span><span
lang=EN-US style='color:blue'>v1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>픽셀 처리 과정의 기본은 최종 색상을 주어진 색상과 텍스처의 색상의 곱으로 결정하는 것입니다<span
lang=EN-US>. </span>그런데 단색화의 요구가 있을 수 있으므로 이 경우에는<span lang=EN-US> rgb</span>는 외부에서
주어진<span lang=EN-US> rgb</span>으로 사용하고 알파는 텍스처의 알파 값을 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlProc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> Pos0: </span><span
lang=EN-US style='color:blue'>POSITION</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
,&nbsp; </span><span lang=EN-US style='color:blue'>float2</span><span
lang=EN-US> Tex0: </span><span lang=EN-US style='color:blue'>TEXCOORD0</span><span
lang=EN-US>) : </span><span lang=EN-US style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>&nbsp; Out=
tex2D(smp0, Tex0);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
*= m_Diff;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> != m_bMono)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>단색</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.a
*= m_Diff.a; &nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>알파는 텍스처의 알파 사용</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.r=
m_Diff.r;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>입력 값 색상 사용</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.g=
m_Diff.g;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.b=
m_Diff.b;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Technique</span>에서
렌더링 상태 머신 값은 알파 블렌딩을 활성화 하고<span lang=EN-US> Source</span>와<span lang=EN-US>
Dest</span>의 알파 값은 각각<span lang=EN-US> SRCALPHA, INVSRCALPHA</span>를 사용합니다<span
lang=EN-US>. </span>또한<span lang=EN-US> U, V </span>값이<span lang=EN-US> [0,1] </span>범위에서만
유효하도록<span lang=EN-US> Address Mode</span>를<span lang=EN-US> Clamp</span>로 설정합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>technique</span><span lang=EN-US> Tech</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>pass</span><span lang=EN-US> P0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CULLMODE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
NONE;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALPHABLENDENABLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
TRUE;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SRCBLEND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
SRCALPHA;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DESTBLEND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
INVSRCALPHA;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ADDRESSU[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
CLAMP;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ADDRESSV[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
CLAMP;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VertexShader</span><span lang=EN-US> = (</span><span
lang=EN-US style='color:#880000'>VtxProc</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>PixelShader</span><span lang=EN-US>&nbsp; = </span><span
lang=EN-US style='color:blue'>compile</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>ps_1_1</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>PxlProc</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>게임에서 단색화가 필요한 경우는 주로 그림자를 그릴 때입니다<span
lang=EN-US>. </span>또한 <span lang=EN-US>2D </span>게임은 확대<span lang=EN-US>/</span>축소에서도<span
lang=EN-US> 2D </span>특유의 느낌을 살리기 위해 픽셀의 필터링을 적용하지 않지 않는 경우가 많이 있습니다<span
lang=EN-US>. </span>그림자를 그릴 때만 부드럽게 적용하도록 필터링을 설정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(bMono)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>단색일 경우 필터링 적용</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetSamplerState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:#A000A0'>D3DSAMP_MAGFILTER</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTEXF_LINEAR</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetSamplerState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:#A000A0'>D3DSAMP_MINFILTER</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTEXF_LINEAR</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetSamplerState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:#A000A0'>D3DSAMP_MIPFILTER</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTEXF_LINEAR</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>else</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetSamplerState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:#A000A0'>D3DSAMP_MAGFILTER</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTEXF_NONE</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetSamplerState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:#A000A0'>D3DSAMP_MINFILTER</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTEXF_NONE</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetSamplerState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:#A000A0'>D3DSAMP_MIPFILTER</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTEXF_NONE</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image016.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>쉐이더<span lang=EN-US>, Effect</span>로
만든<span lang=EN-US> 2D Sprite: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ef03_sprite1_soft.zip">ef03_sprite1_soft.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>직소<span lang=EN-US>(Jigsaw) </span>게임은 특정한 패턴으로 원본 이미지를 잘라내어야
합니다<span lang=EN-US>. </span>이것을 그래픽에서 작업한다면 굉장한 노동력이 필요합니다<span lang=EN-US>. </span>그런데
알파 맵을 만든다면 수작업으로 이미지를 잘라내는 일들을 줄일 수가 있습니다<span lang=EN-US>. </span>이미지의 특정한 영역을
잘라내도록 알파 값을 가진 텍스처를<span lang=EN-US> Alpha </span>맵으로 부르도록 합시다<span lang=EN-US>.
</span>알파 맵을 <span lang=EN-US>Sprite</span>에 적용하기 위해서 다음과 같이 샘플러를 하나 더 추가합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; m_bTx1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>알파 맵 사용</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; m_bMono;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>단색화 사용</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp; m_Diff;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>외부 색상 값</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> smp0 : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>s0</span><span lang=EN-US>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>원본 이미지용 샘플러</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> smp1 : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>s1</span><span lang=EN-US>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>알파 맵 용 샘플러</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>알파 맵 또한<span lang=EN-US> UV</span>를
갖도록 정점 구조체를 수정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>VtxRHWUV1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VEC2</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT </span><span lang=EN-US>&nbsp; z;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp; w;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VEC2</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; t0;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>원본 이미지 좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VEC2</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; t1;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>알파 맵 이미지 좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>enum</span><span lang=EN-US> {</span><span
lang=EN-US style='color:#A000A0'>FVF</span><span lang=EN-US> = (</span><span
lang=EN-US style='color:#A000A0'>D3DFVF_XYZRHW</span><span lang=EN-US>|</span><span
lang=EN-US style='color:#A000A0'>D3DFVF_TEX2</span><span lang=EN-US>),};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>정점 처리 과정은 이전의 <span lang=EN-US>Sprite</span>처럼
입력 값을 그대로 출력 값으로 복사하도록 작성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>VertexShader</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>VtxProc</span><span lang=EN-US> = asm&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 처리<span
lang=EN-US>: </span>입력 값을 그대로 출력</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>dcl_texcoord0</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>v1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>원본 좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>dcl_texcoord1</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>v2</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>알파 맵 좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>mov</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>oT0</span><span lang=EN-US> , </span><span
lang=EN-US style='color:blue'>v1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>mov</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>oT1</span><span lang=EN-US> , </span><span
lang=EN-US style='color:blue'>v2</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>픽셀 처리과정은 알파 맵 적용<span
lang=EN-US>, </span>단색화 두 개의 선택이 있습니다<span lang=EN-US>. </span>먼저 알파 맵 적용의 요구가 있으면
원본 텍스처와 알파 맵을 곱셈<span lang=EN-US>(Modulate)</span>로 처리합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlProc</span><span lang=EN-US>(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;
</span><span lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Pos0:
</span><span lang=EN-US style='color:blue'>POSITION</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:blue'>float2</span><span lang=EN-US> Tex0:
</span><span lang=EN-US style='color:blue'>TEXCOORD0</span><span lang=EN-US
style='color:green'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // </span><span
style='color:green'>원본 입력 좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:blue'>float2</span><span lang=EN-US> Tex1:
</span><span lang=EN-US style='color:blue'>TEXCOORD1</span><span lang=EN-US
style='color:green'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // </span><span
style='color:green'>알파 맵 입력 좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ):</span><span
lang=EN-US style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>&nbsp; Out= </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:blue'>t0</span><span lang=EN-US> = </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(smp0, Tex0);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:blue'>t1</span><span lang=EN-US> = </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(smp1, Tex1);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> != m_bTx1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>알파 맵 사용이 있으면
두 텍스처를 곱함</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= </span><span lang=EN-US style='color:blue'>t0</span><span lang=EN-US> * </span><span
lang=EN-US style='color:blue'>t1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= </span><span lang=EN-US style='color:blue'>t0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
*= m_Diff;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> != m_bMono)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>단색</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.a
*= m_Diff.a; &nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>알파는 텍스처의 알파 사용</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.r=
m_Diff.r;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>입력 값 색상 사용</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>ef03_sprite2_hard</span>를
실행하면 다음과 같이 알파 맵이 적용된 단색화 부분과 텍스처 이미지가 출력되는 것을 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image017.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>알파 맵이 적용된<span lang=EN-US>
Effect</span>로 만든<span lang=EN-US> 2D Sprite: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ef03_sprite2_hard.zip">ef03_sprite2_hard.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이처럼<span lang=EN-US> 2D Sprite</span>를<span lang=EN-US>
Effect </span>만들면 사용의 요구에 따라서 능동적으로 대처할 수 있으므로 본격적으로 게임 제작에 돌입하기 전에 <span
lang=EN-US>Sprite</span>를<span lang=EN-US> Effect</span>로 만들어 보도록 하기 바랍니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>2 Effect</span><span
style='font-size:16.0pt'>와 조명</span></p>

<p class=MsoNormal>쉐이더와<span lang=EN-US> HLSL</span>의 기본적인 내용을 알고 있다면 게임 프로그램의<span
lang=EN-US> 3D </span>장면 연출에서 가장 중요하고 또한 가장 먼저 쉽게 적용할 수 있는 부분이 조명입니다<span
lang=EN-US>. </span>조명은 같은 모델이라도 전혀 다른 느낌을 연출할 수 있음을 고정 기능 파이프라인과 저 수준 쉐이더<span
lang=EN-US>, </span>그리고<span lang=EN-US> HLSL</span>에서 충분히 경험했습니다<span
lang=EN-US>. D3D</span>의 조명을 간단히 정리하면 분산 조명은 램버트 확산을 배경으로 만들어져 있고<span
lang=EN-US>, Specular </span>조명은 퐁 반사에 기반을 두고 있습니다<span lang=EN-US>. </span>또한 이
둘은 고정 기능 파이프 라인에서 분산 조명은 구로 쉐이딩<span lang=EN-US>(Henri Gouraud)</span>으로<span
lang=EN-US>, </span>그리고 스페큘러 쉐이딩으로 불리어지고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>3D </span>기초 시간에 고정 기능 파이프라인은 정점을 기준으로 모든 것을
처리하고 있어서 정점의 숫자가 적은 경우 원하는 조명의 효과를 보지 못한다고 했습니다<span lang=EN-US>. </span>이것을 해결하기
위해서 픽셀 처리 과정에서 조명에 대한 계산이 필요하다고 했습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이 강의에서는 조명에 대한 모든 것을 완성한다는 의미에서 픽셀 쉐이더 기반의 조명 처리뿐만 아니라 조명에 관련된<span
lang=EN-US> Toon </span>쉐이딩을 다시 살펴보고<span lang=EN-US>, </span>마지막으로<span
lang=EN-US> NPR </span>중에서<span lang=EN-US> tonal art</span>의 하나인<span
lang=EN-US> Hatching</span>을 살펴 보겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>2.1 </span><span
style='font-size:14.0pt'>분산 조명</span></p>

<p class=MsoNormal>이전 장에서 공부 했듯이 분산 조명은 램버트 확산에 기반을 둔<span lang=EN-US> D3D</span>의
분산 조명은 램버트 확산에 기초를 두고 있습니다<span lang=EN-US>. </span>램버트 확산은 반사되는 빛의 세기<span
lang=EN-US>(Intensity)</span>를 빛의 방향과 정점의 법선 벡터와의 내적을 통해서 구합니다<span lang=EN-US>.
</span>이를 구하는 공식은 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>반사 밝기<span lang=EN-US> = dot(</span>정점의 법선 벡터<span
lang=EN-US> N, </span>빛의 방향 벡터<span lang=EN-US> L)</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 공식을 그대로 적용하게 되면 최종 색상의 범위는<span lang=EN-US> -1.0 ~ +1.0 </span>가
되므로 적정한 명도를 만들기 위해 우리는 다음과 같은 공식을 사용했었습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>반사 밝기 <span lang=EN-US>= a * dot(N, L) + b </span>또는<span
lang=EN-US> (a + dot(N, L)) * b</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 공식을 다음과 같은<span lang=EN-US> HLSL</span>로 쉽게 바꾸는 것도 연습했었습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3x3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>m_mtRot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>회전 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_vcLgt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>빛의 방향 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US> N = </span><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US>(Nor, m_mtRot); </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터의 회전 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US> L = -m_vcLgt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>빛의 방향 벡터 반전</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> D = (</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5f</span><span lang=EN-US> + dot(N, L)) * </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>6f</span><span lang=EN-US>; </span><span lang=EN-US
style='color:green'>// Lambert </span><span style='color:green'>공식으로 밝기 설정</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image018.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>분산 조명 밝기<span lang=EN-US>: <a
href="https://github.com/3dapi/dv16_shader3/raw/master/ht11_lam1_basic.zip">ht11_lam1_basic.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>분산 조명의 밝기를 정점 처리에서 결정했는데 이것을 픽셀 처리 과정에서 계산해 보도록 합시다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>픽셀 처리과정에서 조명 효과를 계산하는 이유는 정점 처리과정은 조명 효과를 먼저 계산해서 정점의 색상에 반영을
하고 이것을 다시 래스터 과정에서 정점 사이의 색상을 구로 쉐이딩으로 보간하기 때문에 좀 더 자연스러운 조명 효과를 만들기 위해서 픽셀 처리과정에서
조명 효과를 처리하도록 하는 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>정점 처리 과정에서 정점의 법선 벡터를 회전 변환만 적용하고 변환한 법선 벡터를 픽셀 쉐이더로 전달합니다<span
lang=EN-US>. </span>픽셀 쉐이더로 전달할 때 지정된 법선 벡터의 레지스터가 없으므로 텍스처 좌표 레지스터를 사용합니다<span
lang=EN-US>. </span>이로 인해서 전달된 법선 벡터는 소속이 텍스처 좌표여서<span lang=EN-US> GPU</span>는
인접한 법선들과 다음과 같은 공식을 가지고 내부에서 선형 보간을 수행합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>픽셀 처리과정의 법선 벡터 <span lang=EN-US><sub><img border=0
width=208 height=25 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image019.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>(w </span>는 보간에 필요한 비중<span lang=EN-US>(Weight))</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>텍스처 레지스터를 사용할 때<span lang=EN-US> 0</span>번부터는 원래의 텍스처 좌표로 주로
사용되기 때문에 인덱스 끝 번호<span lang=EN-US> 7</span>부터 현재 이용되지 않는 텍스처 좌표 레지스터를 사용할 수 있도록
다음과 같이 출력 구조체를 작성 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>SVsOut</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 위치<span
lang=EN-US>(oPos)</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US> Tx0 : </span><span
lang=EN-US style='color:blue'>TEXCOORD0</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 텍스처 좌표<span
lang=EN-US>(oT0)</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> Nor : </span><span
lang=EN-US style='color:blue'>TEXCOORD7</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>텍스처 좌표를 변환된 법선의
좌표로 사용</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>조명에 대한 정점 처리는 법선 벡터의 회전만 변환합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxPrc</span><span lang=EN-US>( </span><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>, </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>입력 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Nor : </span><span
lang=EN-US style='color:blue'>NORMAL</span><span lang=EN-US>,&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>입력 법선 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US> Tx0 : </span><span
lang=EN-US style='color:blue'>TEXCOORD0</span><span lang=EN-US> </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>입력 텍스처 좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> N = </span><span
lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(Nor, m_mtRot); </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점의 법선 벡터의 회전
변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Pos =
P;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 위치 복사</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Nor =
N;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 법선 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Tx0 =
Tx0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>출력 텍스처 좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>정점에서 처리했던 분산 조명을 픽셀 처리과정에서 연산합니다<span
lang=EN-US>. </span>최종 색상은 물체의 텍스처와 혼합해서 출력하되 알파 값은 텍스처의 알파 값을 사용하도록 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> In) : </span><span
lang=EN-US style='color:blue'>COLOR</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Out = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 색상</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> N = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(In.Nor);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터의 정규화</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> L = -m_vcLgt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>빛의 방향 벡터의 반전</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out&nbsp;&nbsp;
= (</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>5f</span><span lang=EN-US> + </span><span
lang=EN-US style='color:#880000'>dot</span><span lang=EN-US>(N, L)) * </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>6</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Lambert</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.a
= </span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0f</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>텍스처의 알파를 사용하도록<span
lang=EN-US> 1</span>로 설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
*= </span><span lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(
SampDif, In.Tx0 );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>텍스처의 색상과 곱셈</span><span
lang=EN-US> </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image020.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>분산 조명과 텍스처<span lang=EN-US>: <a
href="https://github.com/3dapi/dv16_shader3/raw/master/ht11_lam2_diffuse.zip">ht11_lam2_diffuse.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>만약 여러분이<span lang=EN-US> Effect</span>를
사용하지 않고 분산 조명을 처리한다면 정점 쉐이더<span lang=EN-US>, </span>픽셀 쉐이더 객체를 생성하고 상수 값들을 설정하기
위해 상수 테이블을 사용해야 하겠지만<span lang=EN-US> Effect</span>의 사용으로 인해서 이들 상수 값들이 어느 처리에서
적용되는지 큰 고민 없이 편하게 작성할 수 있게 되었습니다</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>분산 조명에 대한 강의를 맺는 의미로 다중 조명 처리를 만들어 보도록 하겠습니다<span
lang=EN-US>. </span>반사의 밝기와 빛의 색상을 적용하면 반사된 빛의 최종 색상은 다음과 같이 설정할 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>분산 조명 색상<span lang=EN-US> = <sub><img border=0 width=201
height=27 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image021.gif"></sub></span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>이것을 쉐이더로 구현하면<span lang=EN-US>
for</span>문을 통해서 분산 조명과 빛의 색상을 반복적으로 적용해서 최종 색상을 만들어 냅니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US>&nbsp; m_LgtDir[</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>];&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>광원 방향 벡터 배열</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp; m_LgtDif[</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>];&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>광원 색상 배열</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> Out = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 색상</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US> i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;</span><span lang=EN-US
style='color:red'>4</span><span lang=EN-US>; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> t=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t
= </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>25f</span><span lang=EN-US> + dot(N, -m_LgtDir[i])
* .</span><span lang=EN-US style='color:red'>8f</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Lambert</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t
*= m_LgtDif[i];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
+=t;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image022.gif">&nbsp;<img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image023.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>여러 광원을 이용한 분산 조명 효과<span
lang=EN-US>: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht11_lam3_multi.zip">ht11_lam3_multi.zip</a> - 'T', 'R' </span>키<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>여러 강원을 이용한 분산 조명 효과 예제나 그 이전의 분산 조명과 텍스처 예제는 픽셀 처리 과정에서 밝기를 계산했었습니다<span
lang=EN-US>. </span>그런데 이들은 정점 처리 과정에서 계산한 것과 뚜렷한 차이를 느끼지 못할 수 있습니다<span
lang=EN-US>. </span>원래 정점 사이의 분산 조명의 밝기를 정확하게 계산하려면 사원수의 보간에서 유도된 공식을 이용해서 다음과 같이
법선 벡터를 구해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=261 height=41
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image024.gif"></sub>, (<sub><img border=0 width=13
height=19 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image025.gif"></sub></span>는 <span
lang=EN-US><sub><img border=0 width=17 height=23
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image026.gif"></sub></span>과 <span lang=EN-US><sub><img
border=0 width=19 height=23 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image027.gif"></sub></span>의
사이 각<span lang=EN-US>, w=[0,1]</span>의 비중 값<span lang=EN-US>)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>그런데 두 법선 벡터의 사이 각이 작다면 <span lang=EN-US><sub><img border=0
width=57 height=19 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image028.gif"></sub>, <sub><img
border=0 width=68 height=19 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image029.gif"></sub>, <sub><img
border=0 width=131 height=21 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image030.gif"></sub></span>이
되어 법선 벡터는 좀 더 간단한 형태가 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=161 height=23
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image031.gif"></sub></span></p>

<p class=MsoNormal><i><span lang=EN-US>&nbsp;</span></i></p>

<p class=MsoNormal>이것은 법선 벡터를 텍스처 좌표로 넘길 때<span lang=EN-US> GPU</span>가 계산한 법선 벡터와
같습니다<span lang=EN-US>. </span>이로 인해서 분산 조명을 정점 처리 과정에서 계산한 것과 픽셀 처리 과정에서 계산 결과가
크게 차이가 나지 않는 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>2.2 Specular </span><span
style='font-size:14.0pt'>효과</span></p>

<p class=MsoNormal>구로 쉐이딩을 다시 살펴 보면 그림과 같이<span lang=EN-US> 3</span>개의 정점으로 구성된
삼각형에서<span lang=EN-US> p </span>위치의 색상은 정점<span lang=EN-US> 0</span>과 정점<span
lang=EN-US> 2</span>로 보간한<span lang=EN-US> I<sub>0</sub> </span>색상과 정점<span
lang=EN-US> 1</span>과 정점<span lang=EN-US> 2</span>로 보간한<span lang=EN-US> I<sub>1</sub>
</span>색상을 다시 보간 해서 구해 집니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=372 height=229
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image032.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>정점 처리 과정의 구로 쉐이딩<span
lang=EN-US>: </span>색상을 먼저 계산하고 이들을 보간<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것은 분산 조명 효과에서는 거의 문제가 되지 않지만<span lang=EN-US> Specular </span>조명
효과에서는 정점의 개수가 적으면 다음 그림과 같은 상태를 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image033.gif">&nbsp;<img border=0 width=222 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image034.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>정점 쉐이더를 사용한<span lang=EN-US>
Specular </span>효과<span lang=EN-US>: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht12_spec1_vtx.zip">ht12_spec1_vtx.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것은 정점의<span lang=EN-US> Specular </span>효과를 점<span
lang=EN-US> p</span>에 해당하는 법선 벡터와 시선 벡터로 구하지 않고 정점에서만 계산하고<span lang=EN-US> p </span>점에서는
이 값을 선형 보간 하기 때문입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>그리고 정점 처리과정에서 계산되는<span lang=EN-US> Specular </span>값은<span
lang=EN-US> Diffuse</span>에 반영되고 <span lang=EN-US>Diffuse </span>색상 값은 래스터 처리 후에는<span
lang=EN-US> [0, 1]</span>으로 정규화되어 있어서<span lang=EN-US> 1</span>보다 큰 빛의 반사 값을 만들어
놓아도 픽셀 처리 과정에서 이 값을 사용할 수 없게 되어 강렬한 빛의 효과를 만들기가 어렵습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>픽셀<span lang=EN-US> p</span>의 위치에서 정확한<span lang=EN-US>
Specular </span>효과를 만들기 위해서는<span lang=EN-US> I<sub>0</sub></span>에서 법선 벡터를 정점<span
lang=EN-US> 0</span>과 정점<span lang=EN-US> 1</span>의 법선의 보간을 만들고<span
lang=EN-US> I<sub>1</sub></span>에서는 법선 벡터를 정점<span lang=EN-US> 1</span>과 정점<span
lang=EN-US> 2</span>의 법선의 보간으로 만듭니다<span lang=EN-US>. </span>그리고<span
lang=EN-US> I<sub>0</sub> </span>와<span lang=EN-US> I<sub>1</sub></span>의 법선을 가지고
픽셀<span lang=EN-US> p</span>의 위치에 맞는 법선 벡터를 구해서 이것을<span lang=EN-US> Specular </span>공식에
적용해야 합니다<span lang=EN-US>. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;<img border=0 width=371 height=229
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image035.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>정점 법선 벡터를 텍스처 좌표로 픽셀 처리로 넘기기<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>현재로서는 이렇게 정확하게 계산할 수 있는<span lang=EN-US> GPU</span>는 그리 많지 않습니다<span
lang=EN-US>. </span>대신 픽셀 쉐이더<span lang=EN-US> 2.0 </span>이상을 사용하면 어느 정도 이를 구현할
수 있는데 방법은 정점의 법선 벡터를 텍스처 좌표로 저장해서 픽셀 처리기로 넘기는 것입니다<span lang=EN-US>. </span>이렇게
하면 픽셀 처리기는 입력 받은 값은 법선 벡터 값이지만 텍스처 좌표이기 때문에 각각의 픽셀에 대해서 이 값을 선형 보간을 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>선형 보간된 이 텍스처 좌표 값은 크기가<span lang=EN-US> 1</span>이 아니므로 법선 벡터로
사용하기 위해서 꼭 정규화를 해야 합니다<span lang=EN-US>. </span>또한 시선 벡터도 텍스처 좌표로 픽셀 처리로 넘기고 픽셀
처리 과정에서 정규화해서 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>지금까지의 내용을 구현해 보도록 하기 위해서 먼저 정점 처리과정에서<span lang=EN-US>
Specular </span>효과에 대한<span lang=EN-US> Phong </span>반사를 작성해 봅시다<span
lang=EN-US>. </span>이전에 저 수준<span lang=EN-US>, HLSL</span>로 해봤기 때문에 지금은 어려움이 없습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3x3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_mtRot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_vcLgt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>빛의 방향 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_vcCam;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>카메라 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_fShrp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Sharpness</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>정점 처리 프로세스</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxPrc</span><span lang=EN-US>( </span><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>, </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>입력 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> Nor : </span><span
lang=EN-US style='color:blue'>NORMAL</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>입력 법선 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>시선 벡터<span
lang=EN-US> = </span>정규화<span lang=EN-US>(</span>카메라 위치 <span lang=EN-US>&#8211; </span>정점
위치<span lang=EN-US>)</span></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> E = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(m_vcCam -
P);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> N = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(Nor, m_mtRot));&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터의 회전</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> L = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(-m_vcLgt);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>빛의 방향 반전</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> R = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US> * dot(N, L) * N - L); </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>반사 벡터</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> S = </span><span
lang=EN-US style='color:#880000'>pow</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>max</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, dot(R, E)), m_fShrp); </span><span
lang=EN-US style='color:green'>// Phong </span><span style='color:green'>반사 세기</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&lt;<a href="https://github.com/3dapi/dv16_shader3/raw/master/ht12_spec1_vtx.zip">ht12_spec1_vtx.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음으로 정점 처리에서 구현한<span lang=EN-US> Specular</span>를 픽셀 처리에서 구현하기
위해서 법선 벡터와 시선 벡터를 픽셀 처리기가 보간할 수 있도록 다음과 같이 정점 처리의 출력에 대한 구조체에 텍스처 좌표<span
lang=EN-US> Semantic</span>을 사용해서 정점의 법선 벡터와 시선 벡터를 저장할 수 있도록 구성합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>SVsOut</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> Nor : </span><span
lang=EN-US style='color:blue'>TEXCOORD6</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>변환된 법선 벡터를 텍스처
좌표<span lang=EN-US> 6</span>에 저장</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> Eye : </span><span
lang=EN-US style='color:blue'>TEXCOORD7</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>시선 벡터를 텍스처 좌표<span
lang=EN-US> 7</span>에 저장</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>정점 처리 과정에서는 단순하게 법선 벡터를 회전 변환 하고<span
lang=EN-US>, </span>시선 벡터를 구해서 출력 구조체 변수에 저장합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxPrc</span><span lang=EN-US>(…)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>시선 벡터<span
lang=EN-US> = </span>정규화<span lang=EN-US>(</span>카메라 위치 <span lang=EN-US>&#8211; </span>정점
위치<span lang=EN-US>)</span></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> E = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(m_vcCam - P);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> N = </span><span
lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(Nor, m_mtRot); </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터의 회전</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Eye
= E; &nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>시선 벡터 복사</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Nor
= N; &nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>변환된 법선 벡터 복사</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>픽셀 처리 과정에서 먼저 입력 받은 정점의 시선 벡터<span lang=EN-US>, </span>법선 벡터를
다시 정규화 합니다<span lang=EN-US>. </span>이것은 이들 값들이 텍스처 좌표로 넘어와서 픽셀 처리기가 보간하기 때문에 단위
벡터인 크기를 다시<span lang=EN-US> 1</span>로 조정하기 위해서 입니다<span lang=EN-US>. </span>그리고
픽셀 쉐이더 버전은 반드시<span lang=EN-US> 2.0 </span>이상으로 설정해야 제대로 동작합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>픽셀 처리 프로세스<span
lang=EN-US>: </span>반드시<span lang=EN-US> 2.0 </span>이상 버전 필요</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> In) : </span><span
lang=EN-US style='color:blue'>COLOR</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> E = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(In.Eye); </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>시선 벡터 정규화</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> N = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(In.Nor); </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터 정규화</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> L = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(-m_vcLgt);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> R = </span><span
lang=EN-US style='color:#880000'>reflect</span><span lang=EN-US>(-L, N);&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>반사 벡터<span
lang=EN-US>: </span>내장 함수<span lang=EN-US> reflect() </span>이용<span lang=EN-US>.
</span>부호 주의</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> S = </span><span
lang=EN-US style='color:#880000'>pow</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>max</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, dot(R, E)), m_fShrp); </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>퐁 반사</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 코드는 <span lang=EN-US><a href="https://github.com/3dapi/dv16_shader3/raw/master/ht12_spec2_pxl.zip">ht12_spec2_pxl.zip</a></span>에
구현 되어 있으며 실행하면 다음과 같은 장면을 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=243 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image036.gif">&nbsp;<img border=0 width=223 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image037.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>픽셀 쉐이더<span lang=EN-US> 2.0 </span>이상을
사용한<span lang=EN-US> Specular </span>효과<span lang=EN-US>: <a
href="https://github.com/3dapi/dv16_shader3/raw/master/ht12_spec2_pxl.zip">ht12_spec1_pxl.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>분산 조명은 텍스처의 색상과 곱셈 연산을 했지만<span lang=EN-US> Specular </span>효과는
빛의 고 휘도 부분을 표현한 것이므로 곱셈 연산 대신 덧셈을 합니다<span lang=EN-US>. </span>이것을<span
lang=EN-US> HLSL</span>로 다음과 같이 구현합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>texture</span><span lang=EN-US> m_TxDif;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> SampDif = </span><span
lang=EN-US style='color:blue'>sampler_state</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>texture</span><span lang=EN-US> = (m_TxDif);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> In) : </span><span
lang=EN-US style='color:blue'>COLOR</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Out;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 색상</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>S</span><span lang=EN-US> = </span><span
lang=EN-US style='color:#880000'>pow</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>max</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, dot(R, E)), m_fShrp); </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>퐁 반사</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= </span><span lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(
SampDif, In.Tex );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>텍스처 색상 추출</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
+=</span><span lang=EN-US style='color:blue'>S</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>퐁 반사 값과 더함</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image038.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>퐁 반사와 텍스처 혼합<span lang=EN-US>: <a
href="https://github.com/3dapi/dv16_shader3/raw/master/ht12_spec3_tex.zip">ht12_spec3_tex.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>D3D</span>의 조명 효과를 정리하는 의미로<span
lang=EN-US> Specular </span>효과와 분산 조명에 대한 다중 조명을 구현해 봅시다<span lang=EN-US>. </span>먼저
퐁 반사로 구현된<span lang=EN-US> Specular </span>색상을 수식으로 표현해 봅시다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i><span lang=EN-US>Specular </span>색상 <span lang=EN-US>= <sub><img
border=0 width=245 height=27 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image039.gif"></sub></span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>만약<span lang=EN-US> Blinn-Phong </span>반사라면 시선 벡터<span
lang=EN-US> E</span>와 빛의 반사 벡터<span lang=EN-US> R </span>대신<span lang=EN-US>
Half </span>벡터<span lang=EN-US> H</span>와 법선 벡터<span lang=EN-US> N</span>을 사용합니다<span
lang=EN-US>. </span>이 수식에 이전의 분산 조명 수식을 더하면 조명 효과에 대한<span lang=EN-US> Specular
</span>반사가 완성됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>최종 색상 <span lang=EN-US>= <sub><img border=0 width=335
height=27 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image040.gif"></sub></span></i></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>그런데 텍스처가 적용되면 분산 조명은 텍스처 색상과 곱셈을
하고<span lang=EN-US> Specular</span>를 더하는 방법을 가장 많이 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>최종 색상 <span lang=EN-US>= <sub><img border=0 width=315
height=27 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image041.gif"></sub></span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i><sub><img
border=0 width=311 height=26 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image042.gif"></sub></i></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>조금 긴 수식이지만 구현하는데 어려움이 없습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; m_fShrp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Sharpness</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US>&nbsp; m_LgtDir[</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>];&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>조명 방향 벡터 배열</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp; m_LgtDif[</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>];&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>조명 색상 배열</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> In) : </span><span
lang=EN-US style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US> N = </span><span lang=EN-US
style='color:#880000'>normalize</span><span lang=EN-US>(In.Nor); </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터 정규화</span><span
style='color:blue'> </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US> E = </span><span lang=EN-US
style='color:#880000'>normalize</span><span lang=EN-US>(In.Eye); </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>시선 벡터 정규화</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3 </span><span lang=EN-US>L[</span><span lang=EN-US
style='color:red'>3</span><span lang=EN-US>]; </span><span lang=EN-US
style='color:blue'>float3 </span><span lang=EN-US>R[</span><span lang=EN-US
style='color:red'>3</span><span lang=EN-US>]; </span><span lang=EN-US
style='color:blue'>float4 </span><span lang=EN-US>Lam =</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; </span><span lang=EN-US
style='color:blue'>float4 </span><span lang=EN-US>Spc =</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;</span><span lang=EN-US
style='color:red'>3</span><span lang=EN-US>; ++i)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>반사 벡터 계산</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; L[i]
= </span><span lang=EN-US style='color:#880000'>normalize</span><span
lang=EN-US>(-m_LgtDir[i]);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R[i]
= </span><span lang=EN-US style='color:#880000'>reflect</span><span lang=EN-US>(-L[i],N);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;</span><span lang=EN-US
style='color:red'>3</span><span lang=EN-US>; ++i)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>분산 조명<span
lang=EN-US>: Σdot(N, L_i) * Color_i</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lam
+= (</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>5f</span><span lang=EN-US> * </span><span
lang=EN-US style='color:#880000'>dot</span><span lang=EN-US>(N, L[i]) + </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5</span><span lang=EN-US>)*m_LgtDif[i];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;</span><span lang=EN-US
style='color:red'>3</span><span lang=EN-US>; ++i)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>퐁 반사<span
lang=EN-US>: Σdot(E, R_i)^Sharpness * Color_i</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Spc
+= </span><span lang=EN-US style='color:#880000'>pow</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>max</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#880000'>dot</span><span lang=EN-US>(E, R[i])),
m_fShrp)*m_LgtDif[i];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Out = </span><span
lang=EN-US style='color:#880000'>saturate</span><span lang=EN-US>(Lam);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>색상의 범위<span
lang=EN-US> [0,1]</span>로 제한</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US> == m_bTexture)</span><span
lang=EN-US style='color:green'> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
</span><span style='color:green'>분산 조명 값과 텍스처 혼합</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
*= </span><span lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(
SampDif, In.Tex );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Out += Spc;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Specular </span><span style='color:green'>값을 더함</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image043.gif">&nbsp;<img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image044.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>다중<span lang=EN-US> Specular</span>와
분산 조명<span lang=EN-US>: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht12_spec4_multi.zip">ht12_spec4_multi.zip</a>
- R, T </span>키<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>for </span>문에서<span lang=EN-US> 3</span>개의 조명만
사용한 것은<span lang=EN-US> ps_2_0</span>의 명령 슬롯이 적기 때문이며<span lang=EN-US> ps_3_0</span>이상
지원이 되는<span lang=EN-US> GPU</span>는 보다 많은 명령 슬롯을 가지고 있어서 이것을 가지고 있는 분들은 조명의 숫자를
좀 더 늘려서 연습하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>2.3 </span><span
style='font-size:14.0pt'>조명과<span lang=EN-US> NPR</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>2.3.1 Cartoon Shading</span></p>

<p class=MsoNormal>우리는 저 수준 쉐이더 강의에서 툰<span lang=EN-US>(Toon: Cartoon) </span>쉐이딩
방법을 구현해 보았습니다<span lang=EN-US>. </span>툰 쉐이딩을 간단히 정리하면 연속적인 반사의 밝기를 이산적인<span
lang=EN-US>(Discrete) </span>밝기로 만드는 것입니다<span lang=EN-US>. </span>이를 구현하기 위해서 이산적인
값은 불연속적인 텍스처의 흑백 색상으로 만들고 조명의 밝기를 이 텍스처의 좌표로 만들어 샘플링을 통해서 불연속 텍스처의 색상을 가져오도록 하면
툰 쉐이딩 구현이 완료 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>저 수준에서 해보았던 툰 쉐이딩을<span
lang=EN-US> HLSL</span>로 만들어 봅시다<span lang=EN-US>. </span>먼저 정점 출력 구조체에 조명의 밝기를
저장할 수 있도록<span lang=EN-US> 1</span>차원 텍스처 좌표를<span lang=EN-US> Semantic</span>으로
하는 구조체를 구성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>SVsOut</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>&nbsp; Toon: </span><span
lang=EN-US style='color:blue'>TEXCOORD7</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 1</span><span style='color:green'>차원 <span
lang=EN-US>Toon Texture </span>좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>정점 처리에서는<span lang=EN-US> Lambert </span>공식으로 조명의 반사 세기<span
lang=EN-US>(Intensity)</span>를 계산하고 이 반사 값을<span lang=EN-US> 1</span>차원 텍스처 좌표에
저장합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3x3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_mtRot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>회전 행렬</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>float3</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_vcLgt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>조명의 방향 벡터</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxPrc</span><span lang=EN-US>( …, </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> Nor : </span><span
lang=EN-US style='color:blue'>NORMAL</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>입력 법선 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> N = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(Nor, m_mtRot));&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터의 회전</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> L = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(-m_vcLgt);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> D = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>4</span><span lang=EN-US> + </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>6</span><span lang=EN-US> * </span><span lang=EN-US
style='color:#880000'>dot</span><span lang=EN-US>(N, L);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>조명의 밝기 계산</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // [0, 1]</span><span
style='color:green'>로 제한된 밝기를<span lang=EN-US> 1</span>차원 텍스처 좌표로 저장</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Toon
= </span><span lang=EN-US style='color:#880000'>saturate</span><span
lang=EN-US>(D);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>툰 효과를 만들기 위해서 다음과 같은 텍스처를 생성하고 이것을 샘플링 할 수 있도록 샘플러를 만듭니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=457 height=31 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image045.gif"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;</span>카툰<span
lang=EN-US>(Cartoon) </span>텍스처<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>texture</span><span lang=EN-US> m_TxToon;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Toon </span><span style='color:green'>텍스처</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> SampToon = </span><span
lang=EN-US style='color:blue'>sampler_state</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>샘플러</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>texture</span><span lang=EN-US> = (m_TxToon);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>정점 처리 과정에서 만들어진<span lang=EN-US>
1</span>차원 텍스처 좌표를 픽셀 처리 과정에서 샘플링하고 외부에서 주어진 색상과 곱하면 툰 쉐이딩이 완성 됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp; m_ToonColor;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Toon </span><span style='color:green'>색상</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> In) : </span><span
lang=EN-US style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= </span><span lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(
SampToon, In.Toon ) * m_ToonColor;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image046.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Toon Shading: <a
href="https://github.com/3dapi/dv16_shader3/raw/master/ht13_toon1_basic.zip">ht13_toon1_basic.zip</a>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>툰 쉐이딩에 종종 외곽선을 적용하기도 합니다<span
lang=EN-US>. </span>외곽선을 적용하는 가장 쉬운 방법은 법선 벡터를 정점의 위치에 더하고 이것을<span lang=EN-US>
CW</span>로 그리는 것입니다<span lang=EN-US>. </span>이 방법은<span lang=EN-US> Glow </span>효과
때도 구현해 보았으므로 이것을 그대로 사용하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>외곽선용 정점 처리 프로세스</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxPrc0</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION0 </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>입력 정점 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
, </span><span lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Nor
: </span><span lang=EN-US style='color:blue'>NORMAL0&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 법선 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> P = Pos;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> N = Nor;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P
+=N *.</span><span lang=EN-US style='color:red'>05F</span><span lang=EN-US>;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>//
</span><span style='color:green'>정점의 위치에 법선 벡터를 더한다<span lang=EN-US>.</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P.w
= </span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0f</span><span lang=EN-US>;</span><span
lang=EN-US style='color:green'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
w=1</span><span style='color:green'>로 한다<span lang=EN-US>.</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(P,
m_mtWld);&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>월드 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Pos
= P;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 위치에 복사</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>픽셀 처리 함수는 외곽선 처리는 외부에서 주어진 색상으로 단색을
만들고 툰 쉐이딩은 툰 텍스처에서 샘플링 할 수 있도록 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> In, uniform </span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> bTexture) : </span><span
lang=EN-US style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>==bTexture)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>외곽선 처리</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= In.Dff;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>툰 효과 처리</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= </span><span lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(
SampToon, In.Toon );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>technique</span>에서
외곽선을<span lang=EN-US> CW</span>로 먼저 그릴 수 있도록 하기 위해서<span lang=EN-US> pass 0</span>에
정점 쉐이더와 픽셀 쉐이더 객체를 구성 합니다<span lang=EN-US>. pass 1</span>에서는 툰 쉐이딩이 적용되도록<span
lang=EN-US> CCW</span>로 <span lang=EN-US>Cull Mode</span>를 구성합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>technique</span><span lang=EN-US> Tech0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>pass</span><span lang=EN-US> P0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CULLMODE&nbsp;&nbsp;&nbsp;&nbsp;
= CW;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ZWRITEENABLE
= FALSE;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VertexShader</span><span lang=EN-US> = </span><span
lang=EN-US style='color:blue'>compile</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>vs_2_0</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>VtxPrc0</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>PixelShader</span><span lang=EN-US>&nbsp; = </span><span
lang=EN-US style='color:blue'>compile</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>ps_2_0</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>PxlPrc</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>pass</span><span lang=EN-US> P1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CULLMODE&nbsp;&nbsp;&nbsp;&nbsp;
= CCW;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ZWRITEENABLE
= TRUE;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VertexShader</span><span lang=EN-US> = </span><span
lang=EN-US style='color:blue'>compile</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>vs_2_0</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>VtxPrc1</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>PixelShader</span><span lang=EN-US>&nbsp; = </span><span
lang=EN-US style='color:blue'>compile</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>ps_2_0</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>PxlPrc</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image047.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>툰 쉐이딩<span lang=EN-US> + </span>외곽선<span
lang=EN-US>: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht13_toon2_edge.zip">ht13_toon2_edge.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>카툰 효과는 분산 조명에 대한 이산 효과라 한다면<span lang=EN-US> Diffuse </span>텍스처와
함께 렌더링 물체에 적용할 때 분산 조명과 마찬가지로 이들을 곱해야 합니다<span lang=EN-US>. </span>그런데 단순하게 곱해 버리면
카툰 효과를 충분히 발휘 할 수 없을 수도 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>카툰 효과는 주어진 툰 텍스처 보다 밝기<span lang=EN-US>(Intensity)</span>뿐만 아니라<span
lang=EN-US> Contrast</span>를 높여야 할 때도 있습니다<span lang=EN-US>. </span>밝기를 올리려면 툰 효과에
사용되는 밝고 어두운 텍스처에 적절한 값을 곱하고 <span lang=EN-US>Contrast</span>는 쉐이더의<span
lang=EN-US> pow() </span>함수를 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> In) : </span><span
lang=EN-US style='color:blue'>COLOR</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= </span><span lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(SampToon,
In.Toon)*</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>적당한 값을 곱해서 밝기를
올림</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= </span><span lang=EN-US style='color:#880000'>pow</span><span lang=EN-US>(Out,
</span><span lang=EN-US style='color:red'>3</span><span lang=EN-US>)/</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:green'>// pow() </span><span
style='color:green'>함수 이용<span lang=EN-US>, contrast</span>를 높임</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
*= </span><span lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(
SampDif, In.Tx0 );&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>//
Diffuse </span><span style='color:green'>텍스처와 혼합</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.a
= </span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=242 height=182 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image048.gif">&nbsp;<img border=0
width=242 height=181 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image049.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>툰<span lang=EN-US>+</span>텍스처<span
lang=EN-US>: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht13_toon3_diffuse.zip">ht13_toon3_diffuse.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>2.3.2 Hatching</span></p>

<p class=MsoNormal><span lang=EN-US>3D</span>의 조명의 원리를 이해하고 있다면 툰 쉐이딩을 쉽게 구현 할 수
있음을 우리는 잘 알 수 있습니다<span lang=EN-US>. </span>툰 쉐이딩 이외에 조명 원리를 간단하게 적용해서 구현해 볼 수 있는
것이<span lang=EN-US> Hatching </span>입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/dv16_shader3/raw/master/ht13_hatching_tonal_art1.zip">ht13_hatching_tonal_art1.zip</a>
</span>예제를 실행하면 반사의 세기에 따라서 적당한<span lang=EN-US> Hatching</span>으로 만들어진 텍스처가 적용되고
있음을 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image050.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;NPR-tonal art map. <a
href="https://github.com/3dapi/dv16_shader3/raw/master/ht13_hatching_tonal_art1.zip">ht13_hatching_tonal_art1.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 기술은 의외로 간단합니다<span lang=EN-US>. </span>구현 방법은 반사의 밝기를 일정한 구간으로
나누어서 구간에 해당하는<span lang=EN-US> 2</span>개의 텍스처를 적절하게 혼합하는 것입니다<span lang=EN-US>.
</span>예를 들어서 밝기에 대한 텍스처<span lang=EN-US> A, B, C, D, E 5</span>장이 준비되어 있다면<span
lang=EN-US> [0., 0.25) </span>범위는<span lang=EN-US> A</span>와<span lang=EN-US> B
</span>텍스처를<span lang=EN-US>, [0.25, 0.5) </span>구간에 대해서는<span lang=EN-US> B, C</span>를<span
lang=EN-US>, [0.5, 0.75) C, D</span>를<span lang=EN-US>, </span>그리고<span
lang=EN-US> [0.75, 1.0) </span>범위는<span lang=EN-US> D, E </span>텍스처를 사용해서 혼합하는 것입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>그런데 이렇게 전체 밝기를<span lang=EN-US> [0, 1] </span>사이로 하면 혼합하는 텍스처의
비중<span lang=EN-US>(Weight)</span>를 구하는 것이 혼잡하기 때문에 각 구간의 크기를<span lang=EN-US>
1</span>로 정하고<span lang=EN-US>, </span>반사의 밝기를 텍스처 개수<span lang=EN-US>(n-1) </span>만큼
곱합니다<span lang=EN-US>. </span>이렇게 하면 각각의 구간은<span lang=EN-US> [0., 1.), [1.0,
2.), …, [n-2, n-1), [n-1, </span>∞<span lang=EN-US>)</span>이 만들어 집니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>만약 밝기가<span lang=EN-US> 0.7</span>이고 전체 텍스처가<span
lang=EN-US> A(0), B(1), C(2), D(3), E(4) 5 </span>장이면<span lang=EN-US> 0.7 *
(5-1) = 2.8</span>로 계산을 하고<span lang=EN-US> [2., 3.) </span>구간의 텍스처<span
lang=EN-US> C</span>와<span lang=EN-US> D</span>에 비중<span lang=EN-US> (2.8-2)</span>와<span
lang=EN-US> (3 - 2.8)</span>을 각각 곱하고 곱한 결과를 더하면 최종 출력 색상이 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>간단한 원리 이기 때문에 곧바로 이것을 쉐이더로 구현해 봅시다<span lang=EN-US>. </span>만약
다음과 같이 밝기에 대한<span lang=EN-US> 6</span>장의 텍스처가 준비되어 있다면 이들에 대한 샘플러 또한<span
lang=EN-US> 6</span>개를 선언해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> smp0 : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>s0</span><span lang=EN-US>) = </span><span
lang=EN-US style='color:blue'>sampler_state</span><span lang=EN-US>{…};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> smp0 : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>s1</span><span lang=EN-US>) = </span><span
lang=EN-US style='color:blue'>sampler_state</span><span lang=EN-US>{…};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> smp0 : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>s2</span><span lang=EN-US>) = </span><span
lang=EN-US style='color:blue'>sampler_state</span><span lang=EN-US>{…};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> smp0 : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>s3</span><span lang=EN-US>) = </span><span
lang=EN-US style='color:blue'>sampler_state</span><span lang=EN-US>{…};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> smp0 : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>s4</span><span lang=EN-US>) = </span><span
lang=EN-US style='color:blue'>sampler_state</span><span lang=EN-US>{…};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> smp0 : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>s5</span><span lang=EN-US>) = </span><span
lang=EN-US style='color:blue'>sampler_state</span><span lang=EN-US>{…};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=136 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image051.jpg">&nbsp;<img border=0 width=136 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image052.jpg">&nbsp;<img border=0 width=136 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image053.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=136 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image054.jpg">&nbsp;<img border=0 width=136 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image055.jpg">&nbsp;<img border=0 width=136 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image056.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>밝기에 대한<span lang=EN-US> Hatching
Texture&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>반사 모델은 <span lang=EN-US>Lambert </span>확산을 적용한다면 정점 처리 과정에서 반사의
세기를 계산해도 충분합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>SVsOut</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Dif : </span><span
lang=EN-US style='color:blue'>COLOR0</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>분산 조명 밝기</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US> Tex : </span><span
lang=EN-US style='color:blue'>TEXCOORD0</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>디퓨즈 맵 좌표</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>float3x3 </span><span
lang=EN-US>m_mtRot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>회전 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US>&nbsp;  m_vcLgt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>조명의 방향 벡터</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxPrc</span><span lang=EN-US>(…, </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Nor : </span><span
lang=EN-US style='color:blue'>NORMAL0</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>SVsOut</span><span lang=EN-US> Out = (</span><span
lang=EN-US style='color:blue'>SVsOut</span><span lang=EN-US>)</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> N = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(Nor,m_mtRot));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터의 회전</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> L = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(m_vcLgt);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> D = (</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.f+</span><span
lang=EN-US style='color:#880000'>dot</span><span lang=EN-US>(N, L)) * </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5f</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Lambert </span><span style='color:green'>확산으로
밝기 설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Dif
= D;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 구조체에 복사</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>픽셀 처리 과정의 최종 색상은 각 구간에 맞게 비중<span lang=EN-US>(Weight)</span>을
구하고 해당 텍스처에 곱한 다음 더하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> In) : </span><span
lang=EN-US style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; htcLvl
= In.Dif * </span><span lang=EN-US style='color:red'>5</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>밝기를 <span
lang=EN-US>5</span>보다 약간 큰 <span lang=EN-US>5.3</span>배를 한다</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Hatching </span><span style='color:green'>비중 값을
전부<span lang=EN-US> 0</span>으로 설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; Htch0 =
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; Htch1 =
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; Htch2 =
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; Htch3 =
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; Htch4 =
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; Htch5 =
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>밝기에 대한 구간을 찾고
비중을 계산</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(htcLvl &gt; </span><span
lang=EN-US style='color:red'>5</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Htch0
= </span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(htcLvl &gt; </span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Htch2
= </span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> - (</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US> - htcLvl);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Htch3
= </span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> - Htch2;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(htcLvl &gt; </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Htch3
= </span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> - (</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US> - htcLvl);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Htch4
= </span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> - Htch3;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>텍스처 샘플링 값에 해당
텍스처의 비중을 곱함</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>t0</span><span lang=EN-US> = </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(smp0,
In.Tex*m_fHtchW) * Htch0;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>t1</span><span lang=EN-US> = </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(smp1,
In.Tex*m_fHtchW) * Htch1;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>t2</span><span lang=EN-US> = </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(smp2,
In.Tex*m_fHtchW) * Htch2;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>t3</span><span lang=EN-US> = </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(smp3,
In.Tex*m_fHtchW) * Htch3;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>t4</span><span lang=EN-US> = </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(smp4,
In.Tex*m_fHtchW) * Htch4;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>t5</span><span lang=EN-US> = </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(smp5,
In.Tex*m_fHtchW) * Htch5;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>색상을 전부 더하고 출력</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out&nbsp;
= </span><span lang=EN-US style='color:blue'>t0</span><span lang=EN-US> + </span><span
lang=EN-US style='color:blue'>t1</span><span lang=EN-US> + </span><span
lang=EN-US style='color:blue'>t2</span><span lang=EN-US> + </span><span
lang=EN-US style='color:blue'>t3</span><span lang=EN-US> + </span><span
lang=EN-US style='color:blue'>t4</span><span lang=EN-US> + </span><span
lang=EN-US style='color:blue'>t5</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.a
= </span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>만약<span lang=EN-US> Diffuse </span>텍스처를 적용하려면 다음과 같이 마지막 단계에서<span
lang=EN-US> Diffuse </span>텍스처를 샘플링하고 출력 색상에 곱하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= </span><span lang=EN-US style='color:blue'>t0</span><span lang=EN-US> + </span><span
lang=EN-US style='color:blue'>t1</span><span lang=EN-US> + … + </span><span
lang=EN-US style='color:blue'>t5</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.a
= </span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= </span><span lang=EN-US style='color:#880000'>pow</span><span lang=EN-US>(Out,
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>6</span><span lang=EN-US>)*</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// pow()</span><span style='color:green'>함수로 <span
lang=EN-US>Contrast</span>를 낮춤</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
*= </span><span lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(
SampDif, In.Tex );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// Multiply Diffuse Texture</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image057.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Diffuse </span>텍스처가 적용된 <span
lang=EN-US>NPR-tonal art map. <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht13_hatching_tonal_art2.zip">ht13_hatching_tonal_art2.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>3 Mapping</span></p>

<p class=MsoNormal>어떤 오래된 책의 번역을 보면 텍스처를 질감으로 번역해 놓은 경우도 있습니다<span lang=EN-US>.
</span>이론적으로 정점만 있어도 모든 가상의 물체를 표현할 수 있지만 현실과 같은 효과를 주기 위해서는 수백만 개 이상의 정점이 필요할지도
모릅니다<span lang=EN-US>. </span>텍스처는 화면에 동시에 연출 되는 정점 수에 대한 메모리를 줄이고 <span
lang=EN-US>3</span>차원 표면을 사실처럼 묘사하기 위해<span lang=EN-US> 2</span>차원 또는<span
lang=EN-US> 3 </span>차원 이상의 픽셀로 구성되어 있는 것을<span lang=EN-US> 3D </span>기초와 지금까지의
강의 내용으로 잘 알고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>텍스처를 정점에 적용하는 것을 매핑이라 하는데 매핑은 단순하게 정점에<span lang=EN-US> 2</span>차원<span
lang=EN-US>(</span>혹은<span lang=EN-US> 1</span>차원<span lang=EN-US>, 3</span>차원<span
lang=EN-US>) </span>좌표를 설정하는 것으로 그래픽 카드는 이것을 픽셀 처리 과정에서 해당 좌표에서 적당한 샘플링 방법으로 색을
추출한 다음 정점의 색상과 혼합해서 최종 색상을 만들어 냅니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>매핑은 그 목적과 구현 방법에 따라서 여러 종류가 있고 게임에서는<span lang=EN-US>
Diffuse Mapping, Lighting Mapping, Bump Mapping, Specular Mapping, Parallax Mapping,
Environment Mapping, Shadow Mapping, Displacement Mapping </span>등이 있습니다<span
lang=EN-US>. </span>또한 이들 매핑에서 적용되는 텍스처들은<span lang=EN-US> 00 Map</span>이라 부릅니다<span
lang=EN-US>. </span>예를 들어서 디퓨즈 매핑에 사용되는 텍스처를 디퓨즈 맵이라 하고<span lang=EN-US>, </span>라이팅
매핑에 사용되는 텍스처를 라이팅 맵<span lang=EN-US>, </span>범프 매핑에 적용되는 텍스처를 법선 맵<span
lang=EN-US>(Normal Map) </span>또는 범프 맵<span lang=EN-US>(Bump Map), </span>그리고 스페큘러
매핑에 사용되는 텍스처를 스페큘러 맵이라 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이 강의에서는 게임에서 적용되는 각각의 매핑 기술의 원리와 구현을 살펴보겠습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.1 Lighting
Mapping</span></p>

<p class=MsoNormal>디퓨즈 매핑<span lang=EN-US>(Diffuse Mapping)</span>은 우리가 가장 기초적으로
사용하는 매핑 기술로 정점에 단순히 색상을 적용하는 것으로 물체의 표면에 반사되는 난반사에 대한 분산광 효과를 표현하기 때문에 디퓨즈 매핑이라
합니다<span lang=EN-US>. </span>라이팅 매핑<span lang=EN-US>(Lighting Mapping)</span>은 그림자
또는 조명의 밝은 부분 표현하기 위해서 밝기<span lang=EN-US>(</span>음영<span lang=EN-US>)</span>에 대한
값을 텍스처<span lang=EN-US>(</span>라이팅 맵<span lang=EN-US>)</span>로 만들고 디퓨즈 맵과<span
lang=EN-US> Multi-Texturing</span>으로 처리한 픽셀 처리에서 혼합 다중 텍스처 처리로 처리합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>3D </span>게임 초창기 그래픽 카드는 화면에 연출되는 물체의 정점 수가
그리 많지 않았을 때 광원에 대한 효과도 제대로 살리기 어려웠는데 이것을 텍스처로 해결했습니다<span lang=EN-US>. </span>즉<span
lang=EN-US>, </span>정점에 텍스처에 빛의 광원 효과를 저장해서 장면 연출을 할 때 디퓨즈 맵과 다중 텍스처 처리를 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>라이팅 매핑은 부드러운 조명 효과를 적절하게 만들어 주고 표현 또한 우수해서<span lang=EN-US>
ID </span>회사의 게임<span lang=EN-US> '3D </span>퀘이크<span lang=EN-US>'</span>에서 첫 선을
보이면서 현재까지 광범위하게 사용되고 있는 기술이며 아직까지 대부분의<span lang=EN-US> 3D </span>엔진이나 지형 툴에서 라이팅
맵 설정을 지원하고 있으며 실제 게임에서도 많이 응용되고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>현재 일부 엔진의 경우 장면의 렌더링 속도를 위해서 지형의 경우 라이팅 맵과 디퓨즈 맵을 통합해서 하나의 디퓨즈
맵으로 가져 가는 경우도 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>라이팅 매핑은 다음과 같이 두 장의 텍스처를<span lang=EN-US> Modulate </span>연산으로
처리합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><i>최종 색상<span lang=EN-US> = Diffuse Map * Lighting Map * </span>밝기
상수</i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 연산 방법은<span lang=EN-US> 3D </span>기초 시간의 다중 텍스처 처리<span
lang=EN-US>(Multi-Texturing)</span>에서 연습한 내용이고 구현하기가 너무나 간단해서 쉐이더를 사용하지 않고 고정 기능
파이프라인에서도 얼마든지 처리할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>고정 기능 파이프 라인에서 이것을 처리할 때도 앞서 배운<span lang=EN-US> Effect</span>의<span
lang=EN-US> Technique</span>에서 상태 설정을 하게 되면 좀 더 간결해지고 쉬어집니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>디퓨즈 맵</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>texture</span><span lang=EN-US> m_TxDif;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> SampDif = </span><span
lang=EN-US style='color:blue'>sampler_state </span><span lang=EN-US>{ </span><span
lang=EN-US style='color:blue'>texture</span><span lang=EN-US> =
&lt;m_TxDif&gt;; … };</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>라이팅 맵</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>texture</span><span lang=EN-US> m_TxLgt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> SampLgt = </span><span
lang=EN-US style='color:blue'>sampler_state </span><span lang=EN-US>{ </span><span
lang=EN-US style='color:blue'>texture</span><span lang=EN-US> =
&lt;m_TxLgt&gt;; … };</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>technique</span><span lang=EN-US> Tech0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>pass</span><span lang=EN-US> P1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>sampler</span><span lang=EN-US>&nbsp; [</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = (SampDif);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>sampler</span><span lang=EN-US>&nbsp; [</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = (SampLgt);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COLORARG1[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>TEXTURE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COLORARG2[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>DIFFUSE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COLOROP&nbsp;
[</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>SELECTARG1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALPHAOP&nbsp;
[</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>DISABLE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALPHAARG1[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>TEXTURE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALPHAOP&nbsp;
[</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>SELECTARG1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TEXCOORDINDEX[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 0 </span><span style='color:green'>단계 텍스처 좌표 사용</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COLORARG1[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>TEXTURE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COLORARG2[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>CURRENT</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COLOROP&nbsp;
[</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>MODULATE2X</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>색상 연산</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALPHAARG1[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>TEXTURE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALPHAARG2[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>CURRENT</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALPHAOP&nbsp;
[</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>MODULATE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COLOROP&nbsp;
[</span><span lang=EN-US style='color:red'>2</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>DISABLE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALPHAOP&nbsp;
[</span><span lang=EN-US style='color:red'>2</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>DISABLE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다중 텍스처 처리<span lang=EN-US> 0 </span>단계에서 색상의 입력 값<span
lang=EN-US> 1</span>번<span lang=EN-US>((Color Argument1: COLORARG1[0])</span>을 텍스처로
설정하고 정점의 색상 값을 입력 값<span lang=EN-US> 2</span>번<span lang=EN-US>((Color
Argument1: COLORARG2[0])</span>으로 설정합니다<span lang=EN-US>. </span>색상 혼합은 텍스처를 선택합니다<span
lang=EN-US>. </span>텍스처의 색상과 정점의 색상을 혼합하는<span lang=EN-US> OP </span>값을<span
lang=EN-US> MODULATE</span>하는 것이 보통이지만 현재는 순전히 텍스처의 색상만 적용하므로<span lang=EN-US>
OP </span>값을 <span lang=EN-US>stage </span>입력의<span lang=EN-US> 1</span>번을 선택 했습니다<span
lang=EN-US>. </span>알파는 텍스처의 알파를 그대로 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>다중 텍스처 처리<span lang=EN-US> 1 </span>단계에서는<span lang=EN-US> 0
</span>단계에서 출력한 색상<span lang=EN-US> Current</span>를 가지고 라이팅 맵과 혼합하는 단계입니다<span
lang=EN-US>. </span>입력 색상<span lang=EN-US> 1</span>번<span lang=EN-US>(COLORARG1[1])</span>은
라이팅 맵의 텍스처를 선택하고<span lang=EN-US>, 0 </span>단계의 출력 값<span lang=EN-US> CURRENT</span>는<span
lang=EN-US> COLORARG2</span>로 지정해서 이 둘을 곱<span lang=EN-US>(MODULATE) </span>하도록
합니다<span lang=EN-US>. </span>만약 색상에 대한<span lang=EN-US> OP</span>를<span
lang=EN-US> MODULATE</span>로 선택했을 때 어둡게 나오면<span lang=EN-US> MODULATE2X</span>나<span
lang=EN-US> MODULATE4X</span>를 선택합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>알파 값은 두 텍스처의 곱셈인<span lang=EN-US> MODULATE</span>를 선택합니다<span
lang=EN-US>. </span>다음 단계에서 다중 텍스처 처리를 안 하도록<span lang=EN-US> COLOROP[2]</span>와<span
lang=EN-US> ALPHAOP[2] </span>를<span lang=EN-US> DISABLE</span>로 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>다음의 <span lang=EN-US><a href="https://github.com/3dapi/dv16_shader3/raw/master/ht21_lightmap_fixed.zip">ht21_lightmap_fixed.zip</a>
</span>예제는 색상의 혼합을<span lang=EN-US> MODULATE2X</span>와<span lang=EN-US>
MODULATE4X</span>를 사용했습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=360 height=133
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image058.gif">&nbsp;<img border=0 width=360 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image059.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>고정 기능 파이프라인의 라이팅 매핑<span
lang=EN-US>. <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht21_lightmap_fixed.zip">ht21_lightmap_fixed.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>고정 파이프라인에서 라이팅 맵을 사용하기 위해서 다중 텍스처 처리를 사용하기 위해서 각 단계에 대한 상태 값을
설정했지만 쉐이더를 사용하면 라이팅 맵과 디퓨즈 맵은 더하기<span lang=EN-US>, </span>빼기<span lang=EN-US>,
</span>곱하기<span lang=EN-US>, </span>나누기 등의 적당한 산술 식으로 라이팅 매핑을 다음과 구현 할 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:green'>// </span><span
style='color:green'>라이팅 매핑 픽셀 처리 함수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> In, </span><span lang=EN-US
style='color:blue'>uniform</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US> nIntensity) : </span><span
lang=EN-US style='color:blue'>COLOR</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> D = </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>( SampDif, In.Tx0
);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// Diffuse Map</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> L = </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>( SampLgt, In.Tx0
);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// Lighting Map</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= D;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>!=nIntensity)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
*= L * nIntensity;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>HLSL</span>을 사용하면 좀 더 공식에 맞는 코드를 구현할 수 있습니다<span
lang=EN-US>. </span>또한 내장 함수<span lang=EN-US> pow() </span>등을 사용해<span
lang=EN-US> Contrast</span>도 적절하게 만들어 낼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/dv16_shader3/raw/master/ht21_lightmap_shader.zip">ht21_lightmap_shader.zip</a></span>은
라이팅 매핑의 공식을 그대로 사용한 예제로 전체 밝기를<span lang=EN-US> x1, x3, x6 </span>을 구현했습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=362 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image060.gif">&nbsp;<img border=0 width=362 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image061.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Programmable Pipeline Lighting Mapping.
<a href="https://github.com/3dapi/dv16_shader3/raw/master/ht21_lightmap_shader.zip">ht21_lightmap_shader.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.2 Bump Mapping
(Normal Mapping)</span></p>

<p class=MsoNormal>범프 매핑<span lang=EN-US>(Bump Mapping)</span>은 적은 수의 정점을 가지고 보다
높은 광원 효과를 만들기 위해서 법선 벡터를 텍스처에 저장한 법선 맵<span lang=EN-US>(Normal Map)</span>을 픽셀 처리에서
픽셀 단위로 조명에 대한 반사 효과를 적용하는 방법입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>블린<span lang=EN-US>(Jim Blinn)</span>은 정점의 숫자가 적은 단조로운 물체에 텍스처를
이용해서 밝고 어둠에 대한 음영을 더 사실감 있는 효과를 내기 위해서 반사의 세기를 결정하기 위한 법선 벡터를 이미지에 저장하고 프로그램에서 이
이미지의 픽셀을 법선 벡터로 변환해서 분산 조명<span lang=EN-US>, Specular </span>조명을 계산하도록 했습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>노말 맵을 이용한 반사 효과는 정점의 개수에 거의 독립적이며 올록볼록한<span lang=EN-US>
Embossing </span>효과를 만들기 때문에 범프 매핑<span lang=EN-US>(Bump Mapping)</span>이라 부르게 되었습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>정점의 법선 벡터를 이미지에 저장하기 위해서 그래픽 담당자들은 렌더링에 필요한 정점 수보다 훨씬 많은 고 폴리곤<span
lang=EN-US>(High Polygon)</span>으로 메쉬 작업을 먼저 합니다<span lang=EN-US>. </span>그 다음으로
그래픽 툴을 이용해서 법선 벡터를 이미지에 저장을 하고 다시 이 이미지를 재 작업을 합니다<span lang=EN-US>. </span>프로그래머는
간단하게 구현할 수 있지만 그래픽을 만드는 분들에게는 상당히 노동력이 많이 드는 일이 아닐 수 없습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>정점의 법선 벡터 대신에 법선 벡터를 저장한 노말 맵<span lang=EN-US>(Normal Map)</span>에서
벡터를 가져오는 일만 다를 뿐 반사의 밝기를 정하는 기본 처리는 분산 조명 또는<span lang=EN-US> Specular </span>조명에서
사용한 공식 그대로 적용이 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>D3D</span>의 고정 기능 파이프라인은 노말 맵에서 법선 벡터를 추출하고
이 법선 벡터와 빛의 방향 벡터를 내적<span lang=EN-US>(dot product) </span>연산 방법을 제공하고 있습니다<span
lang=EN-US>. </span>구현 방법은 먼저<span lang=EN-US> [-1, 1] </span>범위의 빛의 방향 벡터를<span
lang=EN-US> [0, 255] </span>색상 범위 값으로 만들고<span lang=EN-US> 32 </span>비트<span
lang=EN-US> DWORD</span>형으로<span lang=EN-US> Tfactor</span>에 저장합니다<span
lang=EN-US>. </span>그 다음으로 다중 텍스처 처리에서 색상 혼합<span lang=EN-US> COLOOROP</span>를 <span
lang=EN-US>DOTPRODUCT3</span>로 합니다<span lang=EN-US>. DOTPRODUCT3</span>는<span
lang=EN-US> Tfactor</span>와 텍스처의 색상을 내적으로 흑백의 명암을 만들어 냅니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>프로그램의 구현은 먼저 빛의 방향 벡터를<span lang=EN-US> [0, 255] </span>범위의<span
lang=EN-US> DWORD</span>형으로 만드는 함수부터 작성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VectorToRGB</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>D3DXVECTOR3</span><span lang=EN-US>* vcNor)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US> dwR = (</span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>)(</span><span
lang=EN-US style='color:red'>127</span><span lang=EN-US> * vcNor-&gt;x + </span><span
lang=EN-US style='color:red'>128</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US> dwG = (</span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>)(</span><span
lang=EN-US style='color:red'>127</span><span lang=EN-US> * vcNor-&gt;y + </span><span
lang=EN-US style='color:red'>128</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US> dwB = (</span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>)(</span><span
lang=EN-US style='color:red'>127</span><span lang=EN-US> * vcNor-&gt;z + </span><span
lang=EN-US style='color:red'>128</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> (</span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>)(</span><span
lang=EN-US style='color:red'>0xff000000</span><span lang=EN-US> + (dwR &lt;&lt;
</span><span lang=EN-US style='color:red'>16</span><span lang=EN-US>) + (dwG
&lt;&lt; </span><span lang=EN-US style='color:red'>8</span><span lang=EN-US>) +
dwB);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>렌더링 머신의 상태 설정에서 빛의 방향 벡터가<span lang=EN-US> DWORD</span>형으로 변환된
값을<span lang=EN-US> Tfactor</span>에 저장합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>TEXTUREFACTOR</span><span lang=EN-US>= (m_dTFactor);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Color Arg1 </span>또는<span
lang=EN-US> Arg2 </span>둘 중 하나를<span lang=EN-US> Tfactor</span>로 지정하고<span
lang=EN-US>, </span>노말 맵 텍스처는 나머지<span lang=EN-US> Argument</span>에 설정합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLORARG1[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>TFACTOR</span><span lang=EN-US>; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Tfactor </span><span style='color:green'>값을<span
lang=EN-US> ColorArg1</span>으로 설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLORARG2[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>TEXTURE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Color Op</span>를<span
lang=EN-US> DOTPRODUCT3</span>로 설정하면 렌더링 머신이<span lang=EN-US> Tfactor</span>와 텍스처의
픽셀을 내적<span lang=EN-US>(dot product) </span>연산을 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLOROP&nbsp; [</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>DOTPRODUCT3</span><span lang=EN-US>;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Tfactor</span><span style='color:green'>에 저장된
값과 텍스처의 픽셀을 내적</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=139 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image062.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>디퓨즈 맵과 혼합하려면 여러 단계의 다중 텍스처 처리가 필요합니다<span lang=EN-US>. 0 </span>단계에서
디퓨즈 맵의 색상을 가져와<span lang=EN-US> CURRENT</span>에 저장합니다<span lang=EN-US>. 1 </span>단계는<span
lang=EN-US> Tfactor</span>와 법선 맵의 색상을 내적을 하고 이 값을<span lang=EN-US> TEMP</span>에
저장합니다<span lang=EN-US>. 2 </span>단계는<span lang=EN-US> CURRENT</span>에 저장된 값과<span
lang=EN-US> TEMP</span>에 저장된 값을 혼합합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US>&nbsp; [</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = (SampDif);&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>디퓨즈 맵</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US>&nbsp; [</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = (SampNor);&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 맵</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>TEXTUREFACTOR</span><span lang=EN-US>= (m_dTFactor);&nbsp; </span><span
lang=EN-US style='color:green'>// Tfactor</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>디퓨즈 맵의 색상 가져와서 <span
lang=EN-US>CURRENT</span>에 저장</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLORARG1[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>TEXTURE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLOROP&nbsp; [</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>SELECTARG1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>RESULTARG[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>CURRENT</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// Tfactor</span><span style='color:green'>와 법선 맵의 색상을 내적 하고
결과를<span lang=EN-US> TEMP</span>에 저장</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLORARG1[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>TFACTOR</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLORARG2[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>TEXTURE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLOROP&nbsp; [</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>DOTPRODUCT3</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>RESULTARG[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>TEMP</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// Current</span><span style='color:green'>와<span
lang=EN-US> Temp</span>에 저장된 색상을 혼합</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLORARG1[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>CURRENT</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLORARG2[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>TEMP</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLOROP&nbsp; [</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>MODULATE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>RESULTARG[</span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>] = </span><span lang=EN-US
style='color:#A000A0'>CURRENT</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 방법은 처리에 대해서 총<span lang=EN-US> 3 </span>단계가 필요합니다<span
lang=EN-US>. </span>그런데<span lang=EN-US> Tfactor</span>와 법선 맵의 연산을 먼저 진행하면 단계를 총<span
lang=EN-US> 2 </span>단계로 줄일 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// 0 </span><span style='color:green'>단계에서<span lang=EN-US>
Tfactor</span>와 법선 맵을<span lang=EN-US> dot </span>연산하고 결과를<span lang=EN-US>
CURRENT</span>에 저장</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLORARG1[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>TFACTOR</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLORARG2[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>TEXTURE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLOROP&nbsp; [</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>DOTPRODUCT3</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>ALPHAOP&nbsp; [</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>DISABLE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>RESULTARG[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>CURRENT</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// CURRENT</span><span style='color:green'>의 저장되어 있는 값과 디퓨즈
맵을 혼합</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLORARG1[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>CURRENT</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLORARG2[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>TEXTURE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLOROP&nbsp; [</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>MODULATE2X</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>COLOROP&nbsp; [</span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>] = </span><span lang=EN-US
style='color:#A000A0'>DISABLE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/dv16_shader3/raw/master/ht22_bump_fixed.zip">ht22_bump_fixed.zip</a></span>는<span
lang=EN-US> Tfactor</span>와 법선 맵의 내적 연산과 디퓨즈 맵과<span lang=EN-US> MODULATE,
MODULATE2X, MODULATE4X </span>혼합을 보여주고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=418 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image063.gif"><img border=0 width=418 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image064.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Fixed Function Pipeline Normal Mapping. <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht22_bump_fixed.zip">ht22_bump_fixed.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>범프 효과를 고정 기능 파이프라인에서 간단하게 구현할 수 있지만 문제는 정점의 법선 벡터와 관련 없이 오직 빛의
방향만으로 설정된다는 것입니다<span lang=EN-US>. </span>과거 쉐이더가 지원 되지 않을 때 이 문제를 해결하기 위해서 다음 공식을
이용했었습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>반사의 밝기<span lang=EN-US> = dot(</span>정점의 법선 벡터<span
lang=EN-US>, </span>빛의 방향 벡터<span lang=EN-US>)</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>*
</i></span><i>반사에 대한 법선 벡터 연산 결과</i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>이것을 구현하려면 제일 처음 제시했던 방법을 수정해서<span
lang=EN-US> Color Op</span>를 텍스처만 선택되지 않고<span lang=EN-US> Diffuse</span>와<span
lang=EN-US> Modulate</span>할 수 있게 다음과 같이 수정해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLORARG1[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>TEXTURE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLORARG2[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>DIFFUSE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLOROP&nbsp; [</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>MODULATE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>RESULTARG[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>CURRENT</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>이것은 조명이 활성화 되어 있다면 정점 처리 과정의<span
lang=EN-US> Diffuse </span>색상은 조명과 정점의 법선 벡터 연산의 결과를 저장하고 있기 때문입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>다음으로 쉐이더를 사용한 범프 효과를 구현해 보겠습니다<span
lang=EN-US>. </span>쉐이더를 사용하면 정점의 법선 벡터를 반영해서 좀 더 정교한 범프 효과를 구현 할 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>텍스처의 색상을 법선 벡터로 바꾸기 위해서 먼저 색상의 범위가<span
lang=EN-US> [0, 255]</span>가 아닌<span lang=EN-US> [0,1] </span>범위라는 것을 명심해야 합니다<span
lang=EN-US>. </span>따라서 이것을 조명에 필요한 법선 벡터의 범위<span lang=EN-US> [-1, 1]</span>로 만들기
위해서 텍스처에서 얻은 색상에<span lang=EN-US> 2</span>배를 하고<span lang=EN-US> (-1)</span>을 더해야
합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><i>텍스처의 법선 벡터<span lang=EN-US> =
2* tex2D(</span>노말 맵 샘플러<span lang=EN-US>, </span>텍스처 좌표<span lang=EN-US>).xyz
- 1.0</span></i></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>앞서 노말 맵은 고 폴리곤 작업 등을 통해서 제작이 된다고
했습니다<span lang=EN-US>. </span>그래픽 담당자들은 다음 그림처럼<span lang=EN-US> x, y </span>평면에<span
lang=EN-US> z </span>방향이 위를 향하는 공간에 법선 벡터를 색상으로 저장합니다<span lang=EN-US>. </span>이렇게<span
lang=EN-US> Z</span>축이<span lang=EN-US> D3D</span>의<span lang=EN-US> Y</span>축 방향과
일치하게 되는 이유는 노말 맵 텍스처 작업은<span lang=EN-US> Max</span>와 같은 그래픽 툴을 이용하며 대부분의 그래픽 툴은<span
lang=EN-US> x, y </span>평면에<span lang=EN-US> z</span>축이 위를 향하는 오른손 좌표계로 구성되어 있기
때문입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=416 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image065.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt; </span>법선 맵 공간과 법선 벡터<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>그리고 이 법선 맵은 다음 그림처럼 정점에 매핑이 되면 노말 맵 텍스처 공간의<span lang=EN-US>
z </span>방향은 정점의 법선 벡터<span lang=EN-US>(Normal Vector)</span>에<span lang=EN-US>,
</span>텍스처 공간의<span lang=EN-US> y </span>방향 벡터는 정점의 접선 벡터<span lang=EN-US>(Tangent
Vector)</span>에<span lang=EN-US>, </span>그리고<span lang=EN-US> x </span>방향 벡터는 종법선
벡터<span lang=EN-US>(Binormal Vector)</span>에 대응 시키고 색상에서 추출한 법선 벡터를 이 세 개의 축인 정점의
법선<span lang=EN-US>, </span>접선<span lang=EN-US>, </span>종법선 벡터 공간으로 변환해야 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=346 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image066.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>색상에서 추출한 법선 벡터와 정점의 법선<span
lang=EN-US>, </span>접선<span lang=EN-US>, </span>종법선 벡터로 구성된 공간<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>법선<span lang=EN-US>, </span>접선<span lang=EN-US>, </span>종법선 벡터로
구성된 공간으로 텍스처에서 얻은 법선 벡터를 변환해야 하는데 이것을 쉽게 풀기 위해서 텍스처 공간의<span lang=EN-US> x</span>축<span
lang=EN-US>(1, 0, 0), y</span>축<span lang=EN-US> (0, 1, 0), </span>그리고<span
lang=EN-US> z</span>축<span lang=EN-US> (0, 0, 1)</span>은 어떤 변환 행렬<span
lang=EN-US> M</span>에 의해 각각 종법선<span lang=EN-US>(Bx, By, Bz), </span>접선<span
lang=EN-US>(Tx, Ty, Tz), </span>법선<span lang=EN-US>(Nx, Ny, Nz) </span>벡터로 만들어 진다고
합시다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이것을 수식으로 표현 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=93 height=75
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image067.gif"></sub>, <sub><img border=0 width=93
height=75 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image068.gif"></sub>, <sub><img border=0
width=96 height=75 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image069.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>세 개의 축이 변환하는 것을 하나로 다음과 같이 합칠 수 있으며 이를 통해서 행렬<span
lang=EN-US> M</span>을 아주 손쉽게 구할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=209 height=75
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image070.gif"></sub>&nbsp;</span>≡ <span lang=EN-US><sub><img
border=0 width=151 height=75 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image071.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=140 height=75
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image072.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>그런데 정점의 종법선<span lang=EN-US>, </span>접선<span lang=EN-US>, </span>법선
벡터들은 월드 행렬의 회전 변환을 할 수 있습니다<span lang=EN-US>. </span>따라서 회전 변환이 적용된<span
lang=EN-US> M'</span>도 이와 같은 방법으로 구성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=123 height=75
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image073.gif"></sub>, <sub><img border=0 width=120
height=75 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image074.gif"></sub>, <sub><img border=0
width=125 height=75 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image075.gif"></sub>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=148 height=75
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image076.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 회전 변환 행렬<span lang=EN-US> M'</span>에 색상에서 얻은 법선 벡터<span
lang=EN-US>(TxN.x, TxN.y, TxN.z)</span>를 변환하면 되는데 이것은 행렬<span lang=EN-US> * </span>벡터
연산과 같은 의미입니다<span lang=EN-US>. </span>즉<span lang=EN-US>, </span>최종 법선 벡터는<span
lang=EN-US> &quot;M' * TxN&quot;</span>으로 만들어 집니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=249 height=75
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image077.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것을<span lang=EN-US> HLSL</span>로 작성해야 하는데 픽셀 처리에서는 행렬 연산이 불가능
할 수 있으므로 행렬<span lang=EN-US> * </span>벡터 연산을 풀어서 최종 법선 벡터를 만드는 것이 좋습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>TxN'.x = B.x' * TxN.x + T.x' * TxN.y + N.x'
* TxN.z</span></p>

<p class=MsoNormal><span lang=EN-US>TxN'.y = B.y' * TxN.x + T.y' * TxN.y + N.y'
* TxN.z</span></p>

<p class=MsoNormal><span lang=EN-US>TxN'.z = B.z' * TxN.x + T.z' * TxN.y + N.z'
* TxN.z</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 구한<span lang=EN-US> TxN'</span>을 분산 광원 효과<span
lang=EN-US>, Specular </span>효과의 공식에서 사용되는 법선 벡터로 정해서 사용하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>지금까지의 내용이 맞는지 확인 하기 위해서 다음과 같이 색상이<span lang=EN-US> (127,
127, 255)</span>로 구성된 텍스처를 준비합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=159 height=159
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image078.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>색상 값<span lang=EN-US> (127, 127, 255)</span>은 쉐이더에서<span
lang=EN-US> (0.5, 0.5, 1.0)</span>이 되며 이 값에<span lang=EN-US> 2</span>를 곱하고<span
lang=EN-US> 1</span>을 빼면<span lang=EN-US> (0, 0, 1)</span>이 됩니다<span
lang=EN-US>. </span>이와 같은 텍스처를 구<span lang=EN-US>(Sphere) </span>형태의 물체에 매핑하고 조명을
적용했을 때 정점에 적용된 조명 효과와 같으면 범프 효과는 성공인 것이고 쉐이더 코드는 제대로 작성된 것이라 할 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>구체<span lang=EN-US>(Sphere)</span>는 종법선<span lang=EN-US>, </span>접선<span
lang=EN-US>, </span>법선 벡터를 갖고 있다면 다음과 같이 정점 구조체를 구성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>VtxNUV1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VEC3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Position</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VEC3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Normal</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp; u, v;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Texture Coord</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VEC3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; t;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Tangent</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VEC3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; b;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Binormal</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>또한 정점 선언자는 이 구조체의 자료 순서에 맞게 작성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DVERTEXELEMENT9</span><span lang=EN-US> decl[] =</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:#A000A0'>D3DDECLTYPE_FLOAT3</span><span lang=EN-US>,</span><span
lang=EN-US style='color:#A000A0'>D3DDECLMETHOD_DEFAULT</span><span lang=EN-US>,</span><span
lang=EN-US style='color:#A000A0'>D3DDECLUSAGE_POSITION</span><span lang=EN-US>,</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>},</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>12</span><span lang=EN-US>,</span><span lang=EN-US
style='color:#A000A0'>D3DDECLTYPE_FLOAT3</span><span lang=EN-US>,</span><span
lang=EN-US style='color:#A000A0'>D3DDECLMETHOD_DEFAULT</span><span lang=EN-US>,</span><span
lang=EN-US style='color:#A000A0'>D3DDECLUSAGE_NORMAL</span><span lang=EN-US>&nbsp;
,</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>},</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>24</span><span lang=EN-US>,</span><span lang=EN-US
style='color:#A000A0'>D3DDECLTYPE_FLOAT2</span><span lang=EN-US>,</span><span
lang=EN-US style='color:#A000A0'>D3DDECLMETHOD_DEFAULT</span><span lang=EN-US>,</span><span
lang=EN-US style='color:#A000A0'>D3DDECLUSAGE_TEXCOORD</span><span lang=EN-US>,</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>},</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>32</span><span lang=EN-US>,</span><span lang=EN-US
style='color:#A000A0'>D3DDECLTYPE_FLOAT3</span><span lang=EN-US>,</span><span
lang=EN-US style='color:#A000A0'>D3DDECLMETHOD_DEFAULT</span><span lang=EN-US>,</span><span
lang=EN-US style='color:#A000A0'>D3DDECLUSAGE_TANGENT</span><span lang=EN-US> ,</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>},</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>44</span><span lang=EN-US>,</span><span lang=EN-US
style='color:#A000A0'>D3DDECLTYPE_FLOAT3</span><span lang=EN-US>,</span><span
lang=EN-US style='color:#A000A0'>D3DDECLMETHOD_DEFAULT</span><span lang=EN-US>,</span><span
lang=EN-US style='color:#A000A0'>D3DDECLUSAGE_BINORMAL</span><span lang=EN-US>,</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>},</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>D3DDECL_END</span><span lang=EN-US>()</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 작성하는 것이 정석이지만 고정 기능 파이프라인의<span lang=EN-US> FVF</span>로 작성할
수 있습니다<span lang=EN-US>. </span>보통 텍스처 좌표는 하나의 정점에 하나 또는<span lang=EN-US> 2</span>개
정도만 사용하는 것이 대부분이어서 사용할 수 있는 총<span lang=EN-US> 8</span>개의 텍스처 좌표 중에서 남는 것을<span
lang=EN-US> 3</span>차원으로 하고 접선<span lang=EN-US>(Tangent), </span>종법선<span
lang=EN-US>(Binormal)</span>을 저장합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>enum</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>FVF </span><span lang=EN-US>= </span><span
lang=EN-US style='color:#A000A0'>D3DFVF_XYZ</span><span lang=EN-US>|</span><span
lang=EN-US style='color:#A000A0'>D3DFVF_NORMAL</span><span lang=EN-US>|</span><span
lang=EN-US style='color:#A000A0'>D3DFVF_TEX3</span><span lang=EN-US>|&nbsp; \</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>D3DFVF_TEXCOORDSIZE3</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>)|</span><span
lang=EN-US style='color:#A000A0'>D3DFVF_TEXCOORDSIZE3</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>)</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>D3DFVF_TEX3</span>는<span lang=EN-US> 3</span>개의
텍스처 좌표를 장을 사용하는 것을 의미하고 <span lang=EN-US>D3DFVF_TEXCOORDSIZE3(1)</span>는<span
lang=EN-US> 1 </span>번째의 텍스처 좌표를<span lang=EN-US> 3</span>차원으로 지정함을 의미합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>아직까지 쉐이더가 익숙하지 않은 분들은<span lang=EN-US> FVF</span>를 사용하는 것이 유리해
보입니다<span lang=EN-US>. </span>다음으로 <span lang=EN-US>HLSL</span>를 작성합니다<span
lang=EN-US>. </span>먼저 정점 처리의 출력 구조체에 종법선<span lang=EN-US>, </span>접선<span
lang=EN-US>, </span>법선 벡터를 텍스처 좌표계에 저장될 수 있는 구조를 만듭니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>종법선<span lang=EN-US>, </span>접선<span
lang=EN-US>, </span>법선 벡터를 저장하기 위한 정점 출력 구조체</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>SVsOut</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US> Tex : </span><span
lang=EN-US style='color:blue'>TEXCOORD0</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>디퓨즈 맵 텍스처 좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> Bnr : </span><span
lang=EN-US style='color:blue'>TEXCOORD5</span><span lang=EN-US>; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>종법선 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> Tan : </span><span
lang=EN-US style='color:blue'>TEXCOORD6</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>접선 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> Nor : </span><span
lang=EN-US style='color:blue'>TEXCOORD7</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>접선<span lang=EN-US>, </span>종법선 벡터를
텍스처 좌표를 사용했을 경우 입력<span lang=EN-US> Semantic</span>에<span lang=EN-US> TEXCOORD#</span>으로
지정합니다<span lang=EN-US>. DECLUSAGE</span>를 사용했을 경우 다음의 접선 벡터에 대한<span
lang=EN-US> Semantic</span>는<span lang=EN-US> TANGENT, </span>종법선 벡터에 대한<span
lang=EN-US> Semantic</span>는<span lang=EN-US> BINORMAL</span>를 사용합니다</p>

<p class=MsoNormal style='word-break:keep-all'>정점 처리 함수에서 접선<span lang=EN-US>, </span>종법선
벡터는 법선 벡터와 마찬가지로 회전 변환만 적용하고 이것을 정점 출력 구조체 변수에 저장합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>정점 처리 함수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>입력 정점 위치 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
, </span><span lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Nor
: </span><span lang=EN-US style='color:blue'>NORMAL</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
, </span><span lang=EN-US style='color:blue'>float2</span><span lang=EN-US> Tex
: </span><span lang=EN-US style='color:blue'>TEXCOORD0</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>텍스처 좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
, </span><span lang=EN-US style='color:blue'>float3</span><span lang=EN-US> Tan
: </span><span lang=EN-US style='color:blue'>TEXCOORD1</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>접선 벡터<span
lang=EN-US>. </span>텍스처 좌표<span lang=EN-US> Semantic </span>사용</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
, </span><span lang=EN-US style='color:blue'>float3</span><span lang=EN-US> Bnr
: </span><span lang=EN-US style='color:blue'>TEXCOORD2</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>종법선 벡터<span
lang=EN-US>. </span>텍스처 좌표<span lang=EN-US> Semantic </span>사용</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> N = </span><span
lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(Nor, m_mtRot); </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터의 회전</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> T = </span><span
lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(Tan, m_mtRot); </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>접선 벡터의 회전</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> B = </span><span
lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(Bnr, m_mtRot); </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>종법선 벡터의 회전</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Nor =
N;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>회전 변환한 법선 벡터
저장</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Tan
= T;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>회전 변환한 접선 벡터
저장</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Bnr
= B; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>회전 변환한 종법선 벡터
저장</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>정점 처리 함수는 법선<span lang=EN-US>, </span>접선<span
lang=EN-US>, </span>종법선 벡터의 회전이 있을 뿐 다른 정점 처리 과정과 크게 다른 점은 없습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>픽셀 처리는 최소한 픽셀 쉐이더<span
lang=EN-US> 2.0 </span>이상 지원되는<span lang=EN-US> GPU</span>가 필요합니다<span
lang=EN-US>. </span>이것은 픽셀 쉐이더 조명 때와 마찬가지로 정점의 접선<span lang=EN-US>, </span>종법선 벡터는
픽셀 처리기에 의해 선형 보간이 되고 이 보간된 벡터를 다시 단위 벡터로 만들어야 하는데 이 정도의 명령어 처리는<span
lang=EN-US> 2.0</span>이상 되어야 제대로 구현 되기 때문입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>픽셀 처리 함수는 먼저 입력 받은 법선<span
lang=EN-US>, </span>접선<span lang=EN-US>, </span>종법선 벡터를 단위 벡터로 만듭니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>픽셀 처리 함수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> In) : </span><span
lang=EN-US style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> B= </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(In.Bnr);&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>입력 종법선 벡터를 단위
벡터로 만듦</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> T= </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(In.Tan);&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>입력 접선 벡터를 단위
벡터로 만듦</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> N= </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(In.Nor);&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>입력 법선 벡터를 단위
벡터로 만듦</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음으로 노말 맵에서 색상을 추출해서 이 값을<span lang=EN-US> [-1, 1] </span>범위의
벡터로 만듭니다<span lang=EN-US>. </span>이를 위해서<span lang=EN-US> tex2D()</span>함수로 추출한
색상 값에<span lang=EN-US> 2</span>를 곱하고<span lang=EN-US> 1</span>을 뺍니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> C1= </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> C = </span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>*</span><span lang=EN-US
style='color:#880000'>tex2D</span><span lang=EN-US>(SampNor, In.Tex ).xyz-</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C
= </span><span lang=EN-US style='color:#880000'>normalize</span><span
lang=EN-US>(C);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>색상에서 추출한 이 법선 벡터를 행렬의 변환과 같은 연산을
합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C1.x
= B.x * C.x + T.x * C.y + N.x * C.z;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C1.y
= B.y * C.x + T.y * C.y + N.y * C.z;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C1.z
= B.z * C.x + T.z * C.y + N.z * C.z;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>마지막으로<span lang=EN-US> dot() </span>함수
등을 사용해서 분산 조명 효과를 적용 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bmp
= </span><span lang=EN-US style='color:#880000'>dot</span><span lang=EN-US>(C1,
Lgt);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>분산 조명 적용</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Bmp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=159 height=159
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image078.gif">&nbsp;<img border=0 width=212 height=159
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image079.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;(0,0,1) </span>방향이 저장된 노말 맵을 사용한 분산 조명 효과</p>

<p class=MsoNormal><span lang=EN-US>: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht22_bump1.zip">ht22_bump1.zip</a>,
<a href="https://github.com/3dapi/dv16_shader3/raw/master/ht22_bump2.zip">ht22_bump2.zip</a>, <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht22_bump3.zip">ht22_bump3.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>(0, 0, 1) </span>방향으로 저장된 텍스처를 사용해서 원하는 형태의
조명 효과가 나왔으면 다음과 같은 노말 맵을 적용해 봅니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=159 height=159
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image080.jpg">&nbsp;<img border=0 width=212 height=159
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image081.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>노말 맵과 분산 조명 효과<span lang=EN-US>:
<a href="https://github.com/3dapi/dv16_shader3/raw/master/ht22_bump1.zip">ht22_bump1.zip</a>, <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht22_bump2.zip">ht22_bump2.zip</a>,
<a href="https://github.com/3dapi/dv16_shader3/raw/master/ht22_bump3.zip">ht22_bump3.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>종법선 벡터는 정점의 법선 벡터와 접선 벡터의 외적으로 구할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>종법선 벡터<span lang=EN-US> = cross(</span>법선 벡터<span
lang=EN-US>, </span>접선 벡터<span lang=EN-US>)</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 원리를 이용하면 정점 구조체와 데이터의 크기는 작아집니다<span lang=EN-US>. </span>그런데
픽셀 처리 함수는 종법선 벡터를 사용해야 하기 때문에 입력한 법선 벡터<span lang=EN-US>, </span>접선 벡터<span
lang=EN-US>, </span>그리고<span lang=EN-US> cross() </span>함수를 사용해서 종법선 벡터를 구합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> T= </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(In.Tan);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> N= </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(In.Nor);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> B= </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(cross(T,
N));&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>외적으로 종법선 구함</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 방법을 사용하면 픽셀 처리에서<span lang=EN-US> cross() </span>함수를 사용하지만
정점의 데이터는 줄일 수 있으며 <span lang=EN-US><a href="https://github.com/3dapi/dv16_shader3/raw/master/ht22_bump2.zip">ht22_bump2.zip</a></span>은
이것을 구현한 예제입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>모든 렌더링 물체가 접선 벡터 또는 종법선 벡터가 있으면 완전한 범프 효과를 만들 수 있지만 없는 경우에도 법선
벡터 만으로도 접선<span lang=EN-US>, </span>종법선 벡터를 외적을 이용해서 만들 수 있습니다<span lang=EN-US>.
</span>예를 들어 데카르트 좌표계의<span lang=EN-US> x</span>축<span lang=EN-US>, y</span>축<span
lang=EN-US>, z</span>축 방향 벡터는 서로 직각이며 이런 경우<span lang=EN-US> x</span>축<span
lang=EN-US> = cross(y</span>축<span lang=EN-US>, z</span>축<span lang=EN-US>), y</span>축<span
lang=EN-US> = cross(z</span>축<span lang=EN-US>, x</span>축<span lang=EN-US>), z</span>축<span
lang=EN-US> = cross(x</span>축<span lang=EN-US>, y</span>축<span lang=EN-US>)</span>의
성질이 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이것을 법선<span lang=EN-US>, </span>종법선<span lang=EN-US>, </span>접선에
적용하면 종 법선 벡터를<span lang=EN-US> x</span>축에 평행한<span lang=EN-US> (1, 0, 0) </span>방향으로
정하고 접선 벡터를 법선 벡터와<span lang=EN-US> (1, 0, 0)</span>방향의 종법선 벡터의 외적으로 구하고 단위 벡터로 만듭니다<span
lang=EN-US>. </span>다음으로 접선 벡터와 법선 벡터를 외적하고 이 벡터를 단위 벡터로 만들어 종법선 벡터로 설정합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>종법선 벡터<span lang=EN-US> = float3(1, 0, 0)</span></i></p>

<p class=MsoNormal><i>접선 벡터<span lang=EN-US> = normalize( cross(</span>법선 벡터<span
lang=EN-US>, </span>종법선 벡터<span lang=EN-US>) )</span></i></p>

<p class=MsoNormal><i>종법선 벡터<span lang=EN-US> = normalize( cross(</span>접선 벡터<span
lang=EN-US>, </span>법선 벡터<span lang=EN-US>) )</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>HLSL</span>로 작성하면 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> B= {</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>};&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>종법선 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> T= {</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>};&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>접선 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> N= </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(In.Nor);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T
= </span><span lang=EN-US style='color:#880000'>normalize</span><span
lang=EN-US>(cross(N, B));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B
= </span><span lang=EN-US style='color:#880000'>normalize</span><span
lang=EN-US>(cross(T, N));</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&lt;<a href="https://github.com/3dapi/dv16_shader3/raw/master/ht22_bump3.zip">ht22_bump3.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 방법은<span lang=EN-US> 3</span>가지 문제가 발생할 수 있는데 먼저 법선 벡터가<span
lang=EN-US> (1,0,0)</span>과 평행이면 평행 벡터의 외적은<span lang=EN-US> 0 </span>벡터가 되는 특성에
의해서 접선 벡터가<span lang=EN-US> 0 </span>벡터가 됩니다<span lang=EN-US>. 0 </span>벡터가 아니라도
두 번째 문제인 접선 벡터의 방향입니다<span lang=EN-US>. </span>무조건<span lang=EN-US> (1, 0, 0) </span>방향으로
종법선을 설정했기 때문에 반대 방향이 되면 반사의 밝기는<span lang=EN-US> (+)</span>에서<span lang=EN-US>
(-)</span>가 되거나<span lang=EN-US> (-)</span>가<span lang=EN-US> (+)</span>가 됩니다<span
lang=EN-US>. </span>세 번째 문제는 거의 정사각형 형태에서 노말 맵에서 샘플링 되어야 하는데 밀린 평행사변 형 형태가 되어 텍스처에서
정밀한 법선을 추출하기 어려울 수도 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이들<span lang=EN-US> 3</span>가지 문제 중에서<span lang=EN-US> 2</span>번째가
가장 크게 눈에 띄고 그 다음 첫 번째이며<span lang=EN-US> 3</span>번째의 경우는 잘 보이지 않습니다<span
lang=EN-US>. </span>이렇게 정점의 법선 만으로 범프 효과를 만드는 것이 문제 점이 있지만 이 효과를 적용 안 하는 것보다 구현하는
것이 훨씬 좋습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/dv16_shader3/raw/master/ht22_bump4.zip">ht22_bump4.zip</a></span>는
정점의 법선만으로 픽셀 처리과정에서 접선<span lang=EN-US>, </span>종법선을 구해서 범프 효과를 구현한 예입니다<span
lang=EN-US>. </span>밝기와 <span lang=EN-US>Contrast</span>를 위해서 내적의 결과에 상수를 더했으며<span
lang=EN-US> pow() </span>함수를 이용해서 밝은 부분은 더 밝게<span lang=EN-US>, </span>어두운 부분은 더
어둡게 표현되도록 구현했습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bmp
= </span><span lang=EN-US style='color:#880000'>dot</span><span lang=EN-US>(C1,
Lgt);&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>분산 조명 효과</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bmp
+= </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>85</span><span lang=EN-US>; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>전체 밝기를 올림</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bmp
= </span><span lang=EN-US style='color:#880000'>pow</span><span lang=EN-US>(Bmp,
nPower); </span><span lang=EN-US style='color:green'>// pow() </span><span
style='color:green'>함수를 사용해서<span lang=EN-US> Contrast</span>를 높임</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=418 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image082.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>디퓨즈<span lang=EN-US>, </span>법선 맵<span
lang=EN-US>, </span>범프 효과<span lang=EN-US>: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht22_bump4.zip">ht22_bump4.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=418 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image083.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>디퓨즈 맵<span lang=EN-US> + </span>범프
효과<span lang=EN-US> - 1.2, 2.2, 4.2 : <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht22_bump4.zip">ht22_bump4.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>범프 효과를 사용하면 평범한 디퓨즈 매핑에 입체감 있는 렌더링을 표현할 수 있으며 이것은 이후<span
lang=EN-US> Specular </span>매핑과 결합되어 좀 더 사실감 있는 효과를 만들어 냅니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.3 Specular
Mapping</span></p>

<p class=MsoNormal>스페큘러 맵<span lang=EN-US>(Specular Map)</span>은 일종의<span
lang=EN-US> Highlight Map</span>으로 스페큘러에 적용되는 반사의 세기와<span lang=EN-US>
Sharpness </span>값이 저장된 텍스처입니다<span lang=EN-US>. </span>퐁 쉐이딩 등의 스페큘러 효과를 구현하는 스페큘러
매핑<span lang=EN-US>(Specular Mapping)</span>은 이 텍스처의 값을 가지고 조명의 반사 효과의 변수로 사용합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>스페큘러 맵을 사용해서 다음과 같은 간단한 공식으로 최종 색상을 결정할 수도 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>최종 색상<span lang=EN-US> = </span>조명 효과<span lang=EN-US> +
Specular Map</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=159 height=159
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image084.jpg">&nbsp;<img border=0 width=211 height=158
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image085.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>스페큘러 맵과 반사 효과<span lang=EN-US>: <a
href="https://github.com/3dapi/dv16_shader3/raw/master/ht23_spc_ati.zip">ht23_spc_ati.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>조명 효과에<span lang=EN-US> Highlight </span>색상을 더하는 방법은 구현하기가 쉬어
고정 기능 파이프라인에서부터 자주 사용되던 방법입니다<span lang=EN-US>. </span>처리 방법이 간단해서 대부분의 코드는 조명 효과에
집중되어 있으며 만약 범프 효과와 같이 구현 된다면 최종 색상은 이 둘의 효과를 더해서 만들어 집니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>최종 색상<span lang=EN-US> = </span>범프 효과<span lang=EN-US> +
Specular Mapping </span>효과</i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 공식에 대해서 고정 기능 파이프라인의 다중 텍스처 처리 상태 값은 범프 효과를 먼저 처리하고 그 다음 단계에서
스페큘러 맵의 색상을 더하는 색상 혼합<span lang=EN-US>(Color Op)</span>를<span lang=EN-US> ADD</span>로
처리합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>TEXTUREFACTOR</span><span lang=EN-US>=
(m_dTFactor);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Tfactor</span><span style='color:green'>와 노말 맵의<span
lang=EN-US> dot </span>연산</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COLORARG1[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>TFACTOR</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COLORARG2[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>TEXTURE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COLOROP&nbsp;
[</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>DOTPRODUCT3</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RESULTARG[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>CURRENT</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>디퓨즈 맵과<span
lang=EN-US> Modulate 2x </span>연산</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COLORARG1[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>CURRENT</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COLORARG2[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>TEXTURE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COLOROP&nbsp;
[</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>MODULATE2X</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>스페큘러 맵과<span
lang=EN-US> Add </span>연산</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COLORARG1[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>CURRENT</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COLORARG2[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>TEXTURE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COLOROP&nbsp;
[</span><span lang=EN-US style='color:red'>2</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:#A000A0'>ADD</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=418 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image086.gif"></span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=418 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image087.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;<a href="https://github.com/3dapi/dv16_shader3/raw/master/ht23_spc_fixed.zip">ht23_spc_fixed.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>고정 기능 파이프라인에서도 간단하게 구현이 되지만<span lang=EN-US> Highlight</span>에
대한 색상을 정하려면 여러 단계의 멀티 텍스처 처리를 하거나 아니면 간단하게 색상이 있는 스페큘러 맵을 만들어야 합니다<span
lang=EN-US>. </span>그런데 쉐이더를 사용하면 단색의 스페큘러 텍스처에 색상을 넣거나 밝기와<span lang=EN-US>
Contrast</span>를 높일 수도 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlPrc2</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> In) : </span><span
lang=EN-US style='color:blue'>COLOR</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Hgt = </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>( SampSpc, In.Tex
);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>스페큘러 맵에서 색상 추출</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Hue={</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>6</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>3</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hgt
*= Hue;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>색상<span
lang=EN-US> Shift</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hgt
*= </span><span lang=EN-US style='color:red'>2</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>5</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>전체 밝기를 높임</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hgt
= </span><span lang=EN-US style='color:#880000'>pow</span><span lang=EN-US>(Hgt,
</span><span lang=EN-US style='color:red'>2</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>5</span><span lang=EN-US>)*</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// pow() </span><span style='color:green'>함수로 <span
lang=EN-US>Contrast </span>올림</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Hgt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=136 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image088.gif">&nbsp;<img border=0 width=136 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image089.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>쉐이더를 사용해서 색 변환이 가해진 스페큘러 텍스처<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>이렇게 단색의 색상에 특정 색상을 곱하고<span
lang=EN-US> pow() </span>함수 등을 사용해서 만든 스페큘러 매핑의 효과를 이전의 범프 효과와 결합 하면 좀 더 멋진 효과를
만들어 낼 수 있습니다<span lang=EN-US>. </span>주의 해야 할 것은 곱셈과<span lang=EN-US> pow() </span>함수의
사용이 많아지면 전체 밝기가 어두워질 수 있습니다<span lang=EN-US>. </span>따라서 픽셀 처리 중간 마다 전체 밝기를 올리는
것이 중요합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>스페큘러 매핑과 범프 매핑을 혼합하기 위해서 범프 효과를 만드는
함수를 따로 작성하는 것이 좋습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>범프 효과 처리 함수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> NorPrc(</span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> In_Nor, </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US> In_Tx)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; N
= </span><span lang=EN-US style='color:#880000'>normalize</span><span
lang=EN-US>(In_Nor);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T
= </span><span lang=EN-US style='color:#880000'>normalize</span><span
lang=EN-US>(cross(N, B));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B
= </span><span lang=EN-US style='color:#880000'>normalize</span><span
lang=EN-US>(cross(T, N));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> C = </span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>*</span><span lang=EN-US
style='color:#880000'>tex2D</span><span lang=EN-US>(SampNor, In_Tx ).xyz-</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>색상에서 추출한 법선 벡터의
회전</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C1.x
= B.x * C.x + T.x * C.y + N.x * C.z;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C1.y
= B.y * C.x + T.y * C.y + N.y * C.z;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C1.z
= B.z * C.x + T.z * C.y + N.z * C.z;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bmp
= </span><span lang=EN-US style='color:#880000'>dot</span><span lang=EN-US>(C1,
Lgt) + </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>40</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Bmp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>범프 효과를 처리하는 함수와 스페큘러 텍스처의 색상을 처리하는 함수를 만들면 범프 효과<span
lang=EN-US> + </span>스페큘러 매핑 효과를 만들 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlPrc3</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> In, uniform </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Hue) : </span><span
lang=EN-US style='color:blue'>COLOR</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> TxD = </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>( SampDif, In.Tex
);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>디퓨즈 텍스처 색상</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Bmp = </span><span
lang=EN-US style='color:#880000'>NorPrc</span><span lang=EN-US>(In.Nor,
In.Tex);&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>범프 밝기</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Hgt = </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>( SampSpc, In.Tex
);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>스페큘러 맵 색상</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hgt
*= Hue;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>색상 설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hgt
*= </span><span lang=EN-US style='color:red'>2</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>5f</span><span lang=EN-US>;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>밝기 올림</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hgt
= </span><span lang=EN-US style='color:#880000'>pow</span><span lang=EN-US>(Hgt,
</span><span lang=EN-US style='color:red'>2</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>5</span><span lang=EN-US>)*</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// pow() </span><span style='color:green'>함수로 <span
lang=EN-US>Contrast </span>올림</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= </span><span lang=EN-US style='color:red'>4</span><span lang=EN-US>*TxD *
Bmp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>전체 밝기 올림</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= </span><span lang=EN-US style='color:#880000'>pow</span><span lang=EN-US>(Out,
</span><span lang=EN-US style='color:red'>2</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>5</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
+= Hgt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>범프<span
lang=EN-US> * </span>디퓨즈 텍스처<span lang=EN-US> + </span>스페큘러</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
*=Hue;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>색상을 맞춤</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=418 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image090.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>범프 효과<span lang=EN-US>, </span>스페큘러
효과<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=418 height=136
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image091.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>색상을 가한 범프 효과<span lang=EN-US> + </span>스페큘러
효과<span lang=EN-US>: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht23_spc_shader.zip">ht23_spc_shader.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>실제 렌더링 물체는 평면이 아닌<span lang=EN-US> 3</span>차원 입체로 구성되어 있고 정점의
법선 벡터와 빛의 방향 벡터를 이용한 조명의<span lang=EN-US> Specular </span>효과를 스페큘러 매핑에서 적용해야 합니다<span
lang=EN-US>. </span>간단한 방법은 이 둘을 곱해서<span lang=EN-US> Highlight</span>를 만드는 것입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US style='color:black'> </span><span
lang=EN-US style='color:#880000'>PxlPrc</span><span lang=EN-US
style='color:black'>(</span><span lang=EN-US style='color:blue'>SVsOut</span><span
lang=EN-US style='color:black'> </span><span lang=EN-US>In</span><span
lang=EN-US style='color:black'>) : </span><span lang=EN-US style='color:blue'>COLOR</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US style='color:black'>
</span><span lang=EN-US>Hgt</span><span lang=EN-US style='color:black'> = </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US style='color:
black'>( SampSpc, </span><span lang=EN-US>In</span><span lang=EN-US
style='color:black'>.Tex );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>스페큘러 맵에서 색상 추출</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:black'>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>조명의 스페큘러 효과 계산</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US style='color:black'>
</span><span lang=EN-US>R</span><span lang=EN-US style='color:black'> = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US
style='color:black'>(</span><span lang=EN-US>In</span><span lang=EN-US
style='color:black'>.Rfc);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US style='color:black'>
</span><span lang=EN-US>E</span><span lang=EN-US style='color:black'> = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US
style='color:black'>(</span><span lang=EN-US>In</span><span lang=EN-US
style='color:black'>.Eye);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US style='color:black'>
</span><span lang=EN-US>S</span><span lang=EN-US style='color:black'> = </span><span
lang=EN-US style='color:#880000'>saturate</span><span lang=EN-US
style='color:black'>(</span><span lang=EN-US style='color:#880000'>dot</span><span
lang=EN-US style='color:black'>(</span><span lang=EN-US>R</span><span
lang=EN-US style='color:black'>, </span><span lang=EN-US>E</span><span
lang=EN-US style='color:black'>));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>퐁 반사</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>S </span><span lang=EN-US style='color:black'>= </span><span
lang=EN-US style='color:#880000'>pow</span><span lang=EN-US style='color:black'>(</span><span
lang=EN-US>S</span><span lang=EN-US style='color:black'>, m_fShrp);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:black'>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>스페큘러 맵 색상과 조명의
스페큘러 반사 세기를 곱함</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>Hgt</span><span lang=EN-US style='color:black'> *= </span><span
lang=EN-US>S</span><span lang=EN-US style='color:black'>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:black'>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>Out</span><span lang=EN-US style='color:black'> += </span><span
lang=EN-US>Hgt</span><span lang=EN-US style='color:black'>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>최종 색상에 더함</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US style='color:black'>
</span><span lang=EN-US>Out</span><span lang=EN-US style='color:black'>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=186 height=151
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image092.gif">&nbsp;<img border=0 width=186 height=151
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image093.gif">&nbsp;<img border=0 width=186 height=151
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image094.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Specular </span>조명 효과를 반영한 범프<span
lang=EN-US> + </span>스페큘러 매핑<span lang=EN-US>: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht23_spc+bump.zip">ht23_spc+bump.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>ht23_spc+bump.zip </span>예제는 조명의 반사 세기를 먼저 계산했지만
스페큘러 맵과 퐁 반사 과정의<span lang=EN-US> dot() </span>처리 결과를 먼저 곱하고<span lang=EN-US>
pow() </span>함수를 적용할 수도 있습니다<span lang=EN-US>. </span>이 방법이 논리적으로 맞아 보이는데 문제는 스페큘러
맵의 반사가 아주 작은 일부의 영역이 되면<span lang=EN-US> Highlight</span>는 거의 보이지 않을 수도 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.4 Environment
Mapping</span></p>

<p class=MsoNormal>환경 매핑<span lang=EN-US>(Environment Mapping)</span>은 저 수준 쉐이더와
서피스 강의에서 이미 구현을 해보았습니다<span lang=EN-US>. </span>간단하게 정리한다면 환경 매핑은 <span
lang=EN-US>3D </span>물체에 주변의 경관에 대한 반사 또는 굴절을 표현하는 것으로 이를 구현하는 과정은<span
lang=EN-US> 3D </span>장면을 텍스처에 저장하고<span lang=EN-US>, </span>다음으로 고정 기능 파이프라인에서
환경 매핑을 구현할 수 있는 상태 값을 설정하거나 아니면 쉐이더로 매핑 텍스처 좌표를 설정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>실시간 장면을 저장하기 위해서<span lang=EN-US> Sphere Map </span>또는<span
lang=EN-US> Cube Map</span>을 사용합니다<span lang=EN-US>. Sphere Map</span>은 한 장의 텍스처에
장면을 저장한 것이고<span lang=EN-US> Cube Map</span>은 카메라의 앞쪽<span lang=EN-US>, </span>뒤쪽<span
lang=EN-US>, </span>왼쪽<span lang=EN-US>, </span>오른쪽<span lang=EN-US>, </span>위<span
lang=EN-US>, </span>아래<span lang=EN-US> 6</span>방향에 대해서 장면을 저장한 텍스처 입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=181 height=182
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image095.jpg">&nbsp;<img border=0 width=272 height=182
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image096.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Sphere Map</span>과<span lang=EN-US>
Cube Map&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>단순히 반사에 대해서만 환경 매핑을 구현한다면<span lang=EN-US> Sphere Map</span>이
유리할 수도 있지만 환경 매핑은 반사<span lang=EN-US>(Reflection)</span>뿐만 아니라 굴절<span
lang=EN-US>(Refraction) </span>효과를 표현하기도 해서<span lang=EN-US> Cube Map</span>을 사용하는
것이 바람직합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>아직까지 환경 매핑이 익숙하지 않기 때문에 먼저 저 수준 쉐이더 강의에서 구현한 환경 매핑을<span
lang=EN-US> HLSL</span>로 다시 구현해 보겠습니다<span lang=EN-US>. </span>다음으로<span
lang=EN-US> Cube Map</span>을 만들어서 반사와 굴절을 표현해 보고 마지막으로 반사<span lang=EN-US>, </span>굴절<span
lang=EN-US>, </span>그리고<span lang=EN-US> Diffuse Map</span>을 동시에 적용해서 반 투명 반사 물체를
구현해 보겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>Sphere Map</span>을 가지고 반사 효과를 만드는 방법은 다음 그림의
붉은 색 화살표에 대한 텍스처 좌표를 정점의 법선 벡터로 사용하면 간단하게 반사 효과를 만들 수 있음을 저 수준 쉐이더 시간에 살펴보았습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr style='height:89.4pt'>
  <td width=151 valign=top style='width:4.0cm;padding:0cm 5.4pt 0cm 5.4pt;
  height:89.4pt'>
  <p class=MsoNormal><span lang=EN-US><img border=0 width=125 height=125
  src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image097.gif"></span></p>
  </td>
  <td width=420 style='width:315.0pt;padding:0cm 5.4pt 0cm 5.4pt;height:89.4pt'>
  <p class=MsoNormal><i>텍스처 좌표<span lang=EN-US>'&nbsp; = </span>회전 변환된 정점의 법선 벡터<span
  lang=EN-US> * </span>뷰 행렬</i></p>
  <p class=MsoNormal><i>텍스처 좌표<span lang=EN-US>.x = </span>텍스처 좌표<span
  lang=EN-US>'.x * 0.5 + 0.5 </span></i></p>
  <p class=MsoNormal><i>텍스처 좌표<span lang=EN-US>.y = -</span>텍스처 좌표<span
  lang=EN-US>'.y * 0.5 + 0.5</span></i></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>3D </span>렌더링 물체는 회전할 수도 있기 때문에 법선 벡터는 먼저 회전
변환을 적용하고 텍스처 좌표로 사용하기 위해서 뷰 변환을 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>정점 처리 함수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> Nor : </span><span
lang=EN-US style='color:blue'>NORMAL0</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>SVsOut</span><span lang=EN-US>&nbsp; Out = (</span><span
lang=EN-US style='color:blue'>SVsOut</span><span lang=EN-US>)</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 데이터 초기화</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US>&nbsp; N = Nor;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US>&nbsp; T = </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; N
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(N,
m_mtRot); &nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>법선 벡터의 회전 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; N
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(N,
m_mtViw); &nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>법선 벡터의 뷰 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T&nbsp;&nbsp;
= N.xy; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>텍스처 좌표 설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T.y
= -T.y;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T&nbsp;&nbsp;
= T * </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>5</span><span lang=EN-US> + </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=241 height=181 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image098.gif"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;Sphere Map </span>반사
효과<span lang=EN-US>: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht25_env1_sphere1.zip">ht25_env1_sphere1.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>장면을 텍스처에 저장하는 방법은 후면 버퍼의 색상 버퍼<span lang=EN-US>(</span>또는 서피스<span
lang=EN-US>)</span>를 텍스처의 서피스로 대처하는 방법과 <span lang=EN-US>ID3DXRenderToEnvMap </span>객체를
사용하는 방법 두 가지가 있습니다<span lang=EN-US>. </span>이 둘의 사용은 고정 기능 파이프라인의 서피스 강의에 자세히 나와
있으므로 생소한 분들은 그 것을 참고 하기 바라며 여기서는 <span lang=EN-US>ID3DXRenderToEnvMap</span>를 사용해서<span
lang=EN-US> Sphere, Cube Map</span>에 적용하도록 하겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>ID3DXRenderToEnvMap</span>는 사용하고 있는 후면 버퍼의 색상<span
lang=EN-US>, </span>깊이<span lang=EN-US>, </span>스텐실에 대한<span lang=EN-US> Format</span>을
가지고 <span lang=EN-US>D3DXCreateRenderToEnvMap() </span>함수를 사용해서 객체를 생성합니다<span
lang=EN-US>. </span>후면 버퍼의 색상 버퍼는 디바이스의 <span lang=EN-US>GetRenderTarget() </span>함수를
사용해도 되지만 이 함수는 <span lang=EN-US>D3DCREATE_PUREDEVICE</span>로 만들었을 경우에 제대로 동작하지 않을
수 있으므로<span lang=EN-US> GetBackBuffer() </span>함수를 사용합니다<span lang=EN-US>. </span>깊이<span
lang=EN-US>-</span>스텐실 버퍼는 <span lang=EN-US>GetDepthStencilSurface() </span>함수를
사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>const</span><span
lang=EN-US>&nbsp;&nbsp; </span><span lang=EN-US style='color:blue'>int</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; ENVMAP_RESOLUTION&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:red'>256</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>typedef</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>LPD3DXRenderToEnvMap</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:blue'>PDRE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>PDRE</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp; m_pRndEnv;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>HRESULT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CMain</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>Restore</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>LPDIRECT3DSURFACE9</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; pSrf;
&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>색상<span lang=EN-US>, </span>깊이와 스텐실 버퍼용 서피스</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DSURFACE_DESC</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dscC;
&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>색상 버퍼 정보</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DSURFACE_DESC</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dscD;
&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>깊이 버퍼 정보</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>색상 버퍼 가져오기</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>FAILED</span><span lang=EN-US>(pDev-&gt;</span><span
lang=EN-US style='color:#880000'>GetBackBuffer</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DBACKBUFFER_TYPE_MONO</span><span
lang=EN-US>, &amp;pSrf)))</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US>-</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>색상 버퍼의 정보 가져오기</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pSrf-&gt;</span><span
lang=EN-US style='color:#880000'>GetDesc</span><span lang=EN-US>( &amp;dscC);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pSrf-&gt;</span><span
lang=EN-US style='color:#880000'>Release</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>깊이<span
lang=EN-US>, </span>스텐실 버퍼 가져오기</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>FAILED</span><span lang=EN-US>(pDev-&gt;</span><span
lang=EN-US style='color:#880000'>GetDepthStencilSurface</span><span lang=EN-US>(&amp;pSrf)))</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>깊이<span
lang=EN-US>, </span>스텐실 버퍼의 정보 가져오기</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pSrf-&gt;</span><span
lang=EN-US style='color:#880000'>GetDesc</span><span lang=EN-US>(&amp;dscD);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pSrf-&gt;</span><span
lang=EN-US style='color:#880000'>Release</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>렌더링 환경 매핑 객체
생성</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr
= </span><span lang=EN-US style='color:#880000'>D3DXCreateRenderToEnvMap</span><span
lang=EN-US>( pDev, ENVMAP_RESOLUTION, </span><span lang=EN-US style='color:
red'>1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
dscC.Format, </span><span lang=EN-US style='color:#A000A0'>TRUE</span><span
lang=EN-US>, dscD.Format, &amp;m_pRndEnv );</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>장면을 저장하기 위한<span lang=EN-US> Sphere Map</span>은<span
lang=EN-US> D3DXCreateTexture() </span>함수로 생성을 하며 좀 더 빠르게 처리할 수 있도록 이 함수에<span
lang=EN-US> Memory Pool</span>은<span lang=EN-US> D3DPOOL_DEFAULT</span>로 하고<span
lang=EN-US> Usage</span>는 <span lang=EN-US>D3DUSAGE_RENDERTARGET </span>으로 설정합니다<span
lang=EN-US>. D3DUSAGE_RENDERTARGET </span>옵션이 실패하면<span lang=EN-US> Usage</span>를<span
lang=EN-US> 0</span>으로 설정하고 다시 생성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>typedef</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>LPDIRECT3DTEXTURE9</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>PDTX</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>PDTX</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp; m_pTexSph;</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// Sphere Map </span><span style='color:green'>생성</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr = </span><span
lang=EN-US style='color:#880000'>D3DXCreateTexture</span><span lang=EN-US>(
pDev</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
ENVMAP_RESOLUTION, ENVMAP_RESOLUTION</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DUSAGE_RENDERTARGET</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
dscC.Format, </span><span lang=EN-US style='color:#A000A0'>D3DPOOL_DEFAULT</span><span
lang=EN-US>, &amp;m_pTexSph);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>( </span><span lang=EN-US
style='color:#A000A0'>FAILED</span><span lang=EN-US>( hr ) )</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr
= </span><span lang=EN-US style='color:#880000'>D3DXCreateTexture</span><span
lang=EN-US>(pDev</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
ENVMAP_RESOLUTION, ENVMAP_RESOLUTION</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
dscC.Format, </span><span lang=EN-US style='color:#A000A0'>D3DPOOL_DEFAULT</span><span
lang=EN-US>, &amp;m_pTexSph );</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 코드는 <span lang=EN-US><a href="https://github.com/3dapi/dv16_shader3/raw/master/ht25_env1_sphere2.zip">ht25_env1_sphere2.zip</a></span>의<span
lang=EN-US> CMain </span>클래스를 참고 하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 렌더링 환경 매핑 객체<span lang=EN-US>, </span>그리고 장면을 저장할 텍스처를 만들었으면<span
lang=EN-US> 3D</span>를 텍스처에 저장하고 환경 매핑 처리에 연결하는 단계만 남아 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>3D </span>장면을 텍스처에 저장하기 위해서 카메라의 앞과 뒤에 해당하는<span
lang=EN-US> +z, -z, </span>위<span lang=EN-US>, </span>아래에 해당하는<span lang=EN-US>+y,
-y, </span>그리고 왼쪽<span lang=EN-US>, </span>오른쪽에 해당하는<span lang=EN-US> -x, +x </span>에
대한 총<span lang=EN-US> 6 </span>방향에 대해서 뷰 행렬을 만들고 렌더링을 해야 합니다<span lang=EN-US>.
D3D SDK</span>의<span lang=EN-US> HDRCubeMap Sample</span>에는 이들<span lang=EN-US>
6</span>방향에 대한 뷰 행렬을 만드는 예가 <span lang=EN-US>D3DUtil_GetCubeMapViewMatrix() </span>또는
<span lang=EN-US>DXUTGetCubeMapViewMatrix() </span>함수로 구현되어 있으며 이들 함수 행렬을 반환하는데
메모리 복사를 조금이라도 피하기 위해 다음과 같이 수정 했습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>T_SetupCubeViewMatrix</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>* pmtViw, </span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US> dwFace )</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>D3DXVECTOR3</span><span lang=EN-US>
vcEye&nbsp;&nbsp; = </span><span lang=EN-US style='color:blue'>D3DXVECTOR3</span><span
lang=EN-US>( </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>D3DXVECTOR3</span><span lang=EN-US>
vcLook;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>D3DXVECTOR3</span><span lang=EN-US>
vcUp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>switch</span><span lang=EN-US>(
dwFace )</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>case</span><span lang=EN-US> </span><span
lang=EN-US style='color:#A000A0'>D3DCUBEMAP_FACE_POSITIVE_X</span><span
lang=EN-US>:</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vcLook = </span><span lang=EN-US style='color:blue'>D3DXVECTOR3</span><span
lang=EN-US>( </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vcUp&nbsp;&nbsp; = </span><span lang=EN-US style='color:blue'>D3DXVECTOR3</span><span
lang=EN-US>( </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>break</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>case</span><span lang=EN-US> </span><span
lang=EN-US style='color:#A000A0'>D3DCUBEMAP_FACE_NEGATIVE_X</span><span
lang=EN-US>:</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vcLook = </span><span lang=EN-US style='color:blue'>D3DXVECTOR3</span><span
lang=EN-US>(-</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vcUp&nbsp;&nbsp; = </span><span lang=EN-US style='color:blue'>D3DXVECTOR3</span><span
lang=EN-US>( </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>break</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>case</span><span lang=EN-US> </span><span
lang=EN-US style='color:#A000A0'>D3DCUBEMAP_FACE_POSITIVE_Y</span><span
lang=EN-US>:</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vcLook = </span><span lang=EN-US style='color:blue'>D3DXVECTOR3</span><span
lang=EN-US>( </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vcUp&nbsp;&nbsp; = </span><span lang=EN-US style='color:blue'>D3DXVECTOR3</span><span
lang=EN-US>( </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US>,-</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>break</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>case</span><span lang=EN-US> </span><span
lang=EN-US style='color:#A000A0'>D3DCUBEMAP_FACE_NEGATIVE_Y</span><span
lang=EN-US>:</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vcLook = </span><span lang=EN-US style='color:blue'>D3DXVECTOR3</span><span
lang=EN-US>( </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US>,-</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vcUp&nbsp;&nbsp; = </span><span lang=EN-US style='color:blue'>D3DXVECTOR3</span><span
lang=EN-US>( </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>break</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>case</span><span lang=EN-US> </span><span
lang=EN-US style='color:#A000A0'>D3DCUBEMAP_FACE_POSITIVE_Z</span><span
lang=EN-US>:</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vcLook = </span><span lang=EN-US style='color:blue'>D3DXVECTOR3</span><span
lang=EN-US>( </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vcUp&nbsp;&nbsp; = </span><span lang=EN-US style='color:blue'>D3DXVECTOR3</span><span
lang=EN-US>( </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
lang=EN-US style='color:blue'>break</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>case</span><span lang=EN-US> </span><span
lang=EN-US style='color:#A000A0'>D3DCUBEMAP_FACE_NEGATIVE_Z</span><span
lang=EN-US>:</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vcLook = </span><span lang=EN-US style='color:blue'>D3DXVECTOR3</span><span
lang=EN-US>( </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US>,-</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vcUp&nbsp;&nbsp; = </span><span lang=EN-US style='color:blue'>D3DXVECTOR3</span><span
lang=EN-US>( </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>break</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:green'>// </span><span style='color:green'>카메라의<span
lang=EN-US> +x, -x, +y, -y, +z, -z </span>방향에 대한 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:#880000'>D3DXMatrixLookAtLH</span><span
lang=EN-US>(pmtViw, &amp;vcEye, &amp;vcLook, &amp;vcUp );</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 카메라의<span lang=EN-US> x, y, z </span>축 방향에 대한<span
lang=EN-US> 6</span>개의 행렬을 만들고 이를 카메라의 뷰 행렬과 곱하면 각 방향에 대한 뷰 행렬을 만들 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXMATRIX</span><span lang=EN-US> mtViwCur;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>현재 장면의 뷰 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pDev-&gt;</span><span
lang=EN-US style='color:#880000'>GetTransform</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DTS_VIEW</span><span lang=EN-US>,
&amp;mtViwCur); &nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>디바이스에서 뷰 행렬 얻기</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXMATRIX</span><span lang=EN-US> mtViw[</span><span
lang=EN-US style='color:red'>6</span><span lang=EN-US>];&nbsp;&nbsp; // </span>카메라의<span
lang=EN-US> 6 </span>방향에 대한 행렬</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;</span><span lang=EN-US
style='color:red'>6</span><span lang=EN-US>; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>T_SetupCubeViewMatrix</span><span lang=EN-US>(&amp;mtViw[i],
(</span><span lang=EN-US style='color:#A000A0'>D3DCUBEMAP_FACES</span><span
lang=EN-US>) i );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mtViw[i]
= mtViwCur * mtViw[i];</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>카메라의 각각의 축에 대한 뷰 행렬을 만들었으면 다음으로<span lang=EN-US> 6</span>번을 순회하면서<span
lang=EN-US> Sphere Map</span>에 장면을 <span lang=EN-US>ID3DXRenderToEnvMap </span>객체의
도움을 받아 렌더링 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// Rendering to Sphere surface</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pRndEnv-&gt;</span><span
lang=EN-US style='color:#880000'>BeginSphere</span><span lang=EN-US>(m_pTxSph);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(i=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; i&lt;</span><span
lang=EN-US style='color:red'>6</span><span lang=EN-US>; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pRndEnv-&gt;</span><span
lang=EN-US style='color:#880000'>Face</span><span lang=EN-US>( (</span><span
lang=EN-US style='color:#A000A0'>D3DCUBEMAP_FACES</span><span lang=EN-US>) i, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>RenderScene</span><span lang=EN-US>(
&amp;mtViw[i], &amp;mtPrj);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pRndEnv-&gt;</span><span
lang=EN-US style='color:#880000'>End</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>실시간 장면을 저장한 텍스처를 환경 매핑을 구현한<span lang=EN-US> CShaderEx </span>객체의
환경 매핑 텍스처로 설정하면 주전자의 표면이 주변을 반사한 효과를 만들 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=241 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image099.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>장면을 저장한<span lang=EN-US> Sphere
Map</span>으로 구현한 환경 매핑<span lang=EN-US>: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht25_env1_sphere3.zip">ht25_env1_sphere3.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>반사 효과는<span lang=EN-US> Sphere Map</span>을 사용해도 충분합니다<span
lang=EN-US>. </span>그런데 실 세계의 플라스틱 또는 유리병 같은 물체는 반사<span lang=EN-US>(Reflection)</span>뿐만
하니라 굴절<span lang=EN-US>(Refraction) </span>효과도 만들어 냅니다<span lang=EN-US>. </span>이것을<span
lang=EN-US> 3D </span>구현하려면<span lang=EN-US> Sphere Map</span>으로 더 이상 표현할 수 없습니다<span
lang=EN-US>. </span>이렇게 굴절 효과까지 포함한 환경 매핑은<span lang=EN-US> Cube Map</span>을 사용해야
합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>Cube Map</span>은<span lang=EN-US> Sphere
Map</span>이 카메라 주변에 대해서 한 개의 텍스처를 사용하는 것에 반해서 각각의<span lang=EN-US> 6 </span>방향에
대한 장면을 저장한 텍스처 입니다<span lang=EN-US>. </span>반사에 효과 자체는<span lang=EN-US> Cube
Map</span>과<span lang=EN-US> Sphere Map </span>둘 다 비슷하지만 구현하는 방법은 전혀 다릅니다<span
lang=EN-US>. Cube Map</span>은<span lang=EN-US> Sphere Map</span>과 다르게 그림처럼 카메라의
방향에 따라 장면 그 자체를 저장하고 있어서 적절할<span lang=EN-US> UV</span>를 만들고 텍스처에서 픽셀을 가져와야 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=276 height=207
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image100.jpg"><img width=292 height=232
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image101.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Cube Map</span>에 저장된 장면<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>UV</span>를 구성하고 픽셀을 가져오는 것이 어려워 보이지만 사용자 프로그래머는<span
lang=EN-US> Cube Map</span>을 만들어 놓고 디바이스의 상태 값을 설정하거나 아니면<span lang=EN-US> HLSL</span>의<span
lang=EN-US> texCUBE() </span>함수로 간단히 픽셀을 가져올 수 있어서 이 부분은 걱정할 필요가 없습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Sphere Map</span>을 연습한 것처럼 먼저 미리 만들어진<span
lang=EN-US> Cube Map</span>을<span lang=EN-US> HLSL</span>을 사용해서 렌더링 해보고 다음으로 실시간
장면을<span lang=EN-US> Cube Map</span>에 저장해서 렌더링 해봅시다<span lang=EN-US>. DX SDK</span>의
예제에는 이미 장면을 저장해 놓은<span lang=EN-US> &quot;LobbyCube.dds&quot; </span>라는<span
lang=EN-US> Cube Map </span>파일이 있습니다<span lang=EN-US>. </span>파일에 저장된<span
lang=EN-US> Cube Map</span>의 텍스처는<span lang=EN-US> IDirect3dCubeTexture9 </span>객체가
필요하고 이 객체는<span lang=EN-US> D3DXCreateCubeTextureFromFile() </span>함수를 사용해서 만듭니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>typedef</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>LPDIRECT3DCUBETEXTURE9</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>PDTC</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>PDTC</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; m_pTxCbm;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>D3DXCreateCubeTextureFromFile</span><span
lang=EN-US>( m_pDev, </span><span lang=EN-US style='color:fuchsia'>&quot;data/LobbyCube.dds&quot;</span><span
lang=EN-US>, &amp;m_pTxCbm );</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Sphere Map</span>이 법선 벡터를 직접 텍스처 좌표를 사용했는데<span
lang=EN-US> Cube Mapping</span>은<span lang=EN-US> 3</span>차원 반사<span
lang=EN-US>(Reflection) </span>벡터를 사용합니다<span lang=EN-US>. </span>이 반사 벡터를<span
lang=EN-US> HLSL</span>의<span lang=EN-US> texCUBE() </span>함수에 전달하면 디바이스는<span
lang=EN-US> Cube Map</span>에서 픽셀을 가져옵니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:green'>// Cube </span><span
style='color:green'>텍스처에서 픽셀을 처리하는 함수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:#880000'>PxlPrc</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> vcReflection) : </span><span
lang=EN-US style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return </span><span lang=EN-US style='color:#880000'>texCUBE</span><span
lang=EN-US>( Sampler_CubeMap, vcReflection);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>정점 처리와 병행하는 것이 보통이므로 정점 처리에서 변환된 위치와 반사 벡터를 저장할 수 있도록<span
lang=EN-US> Cube Mapping</span>에 대한 정점 처리 출력 구조체를 구성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>SVsOut</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>&nbsp; Pos : </span><span
lang=EN-US style='color:blue'>POSITION0</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US>&nbsp; Rfc : </span><span
lang=EN-US style='color:blue'>TEXCOORD7</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>반사 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이제 정점 처리 함수를 작성해야 하는데 주의할 것은 출력에 대한 반사 벡터는 조명의 반사 중에서 퐁 반사 시간에
구현했던 반사 벡터와 거의 같은 방식으로 정점의 법선 벡터와 변환한 정점의 위치에서 카메라의 위치에 대한 방향인 시선 벡터를 사용해서 만듭니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>그런데 조명과 다르게 이 반사 벡터는 뷰 공간<span lang=EN-US>(View Space or
Camera Space)</span>의 벡터 이여만 합니다<span lang=EN-US>. </span>이것은 실시간 장면을 저장한 텍스처는 카메라를
중심으로 만들어지기 때문입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=420 height=264
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image102.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>반사와 굴절 벡터<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>뷰 공간에서 반사 벡터를 만드는 방법은 간단하게 정점의 법선 벡터를 회전 변환 후에 다시 뷰 변환 과정을 추가하면
됩니다<span lang=EN-US>. </span>또한 뷰 변환 후 정점의 위치에서 카메라의 위치를 바라보는 시선 벡터는 정점 위치의 월드 변환
후 뷰 변환 후의 벡터를 정규화 하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> Nor : </span><span
lang=EN-US style='color:blue'>NORMAL0</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>SVsOut</span><span lang=EN-US> Out = (</span><span
lang=EN-US style='color:blue'>SVsOut</span><span lang=EN-US>)</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Initialize to Zero</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>&nbsp; P = </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>(Pos,</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US>&nbsp; N = Nor;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US>&nbsp; E = </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US>&nbsp; R = </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; N
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(N,
m_mtWld);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터의 월드 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; N
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(N,
m_mtViw);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터의 뷰 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; N
= </span><span lang=EN-US style='color:#880000'>normalize</span><span
lang=EN-US>(N);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>단위 벡터로 만듦</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(P,
m_mtWld);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 위치의 월드 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(P,
m_mtViw);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 위치의 뷰 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; E
= -</span><span lang=EN-US style='color:#880000'>normalize</span><span
lang=EN-US>(P);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>시선 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R
= </span><span lang=EN-US style='color:red'>2</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> * </span><span
lang=EN-US style='color:#880000'>dot</span><span lang=EN-US>(E, N) * N - E;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>반사 벡터<span
lang=EN-US>: reflect( -E, N );</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Rfc
= R;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>반사 벡터를 출력 레지스터에
복사</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>HLSL</span>에서 벡터가<span
lang=EN-US> 3</span>차원 이면<span lang=EN-US> float4x4 </span>행렬과 곱셈을 해도<span
lang=EN-US> float3x3 </span>행렬과의 곱셈과 같습니다<span lang=EN-US>. </span>또한 렌더링 물체에 같은<span
lang=EN-US> Scale</span>이 적용이 되면 법선 벡터를 월드 변환과 뷰 변환을 진행한 후에 정규화 하면 뷰 공간에서의 법선 벡터가
됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image103.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>장면을 저장한 <span lang=EN-US>Cube
Map</span>으로 구현한 환경 매핑<span lang=EN-US>: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht25_env2_cube1.zip">ht25_env2_cube1.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Cube Mapping</span>에 대한<span lang=EN-US>
HLSL</span>을 작성했고<span lang=EN-US>, </span>다음으로 장면을<span lang=EN-US> Cube Map</span>에
저장하는 단계인데 이 과정은<span lang=EN-US> Sphere Map</span>에서와 거의 같으며 먼저 <span
lang=EN-US style='color:#880000'>D3DXCreateCubeTexture</span><span lang=EN-US>()
</span>함수를 사용해서<span lang=EN-US> Cube Map </span>객체를 생성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr = </span><span
lang=EN-US style='color:#880000'>D3DXCreateCubeTexture</span><span lang=EN-US>(
pDev, ENVMAP_RESOLUTION</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DUSAGE_RENDERTARGET</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
dscC.Format, </span><span lang=EN-US style='color:#A000A0'>D3DPOOL_DEFAULT</span><span
lang=EN-US>, &amp;m_pTexCbm);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>( </span><span lang=EN-US
style='color:#A000A0'>FAILED</span><span lang=EN-US>( hr ) )</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr
= </span><span lang=EN-US style='color:#880000'>D3DXCreateCubeTexture</span><span
lang=EN-US>(pDev, ENVMAP_RESOLUTION</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, dscC.Format, </span><span
lang=EN-US style='color:#A000A0'>D3DPOOL_DEFAULT</span><span lang=EN-US>,
&amp;m_pTexCbm );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&lt;<a href="https://github.com/3dapi/dv16_shader3/raw/master/ht25_env2_cube2.zip">ht25_env2_cube2.zip</a>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Sphere Map</span>과 마찬가지로<span lang=EN-US>
Usage</span>를 <span lang=EN-US>D3DUSAGE_RENDERTARGET </span>으로 해서 하드웨어 가속을 받게 합니다<span
lang=EN-US>. </span>이 옵션이 실패하면<span lang=EN-US> Usage</span>를<span lang=EN-US>
0</span>으로 하고 다시 생성합니다<span lang=EN-US>. </span>전체 코드는 <span lang=EN-US><a
href="https://github.com/3dapi/dv16_shader3/raw/master/ht25_env2_cube2.zip">ht25_env2_cube2.zip</a></span>을 참고 하기 바랍니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>이제 남은 단계는 장면을<span lang=EN-US> Cube Map</span>에 저장하는 과정입니다<span
lang=EN-US>. </span>이것은<span lang=EN-US> Sphere Map</span>에서와 같으며 차이는 <span
lang=EN-US>ID3DXRenderToEnvMap </span>객체의<span lang=EN-US> BeginSphere </span>대신<span
lang=EN-US> BeginCube() </span>함수를 호출을 시작으로 카메라의<span lang=EN-US> 6</span>방향에 따라
장면을<span lang=EN-US> Cube Map</span>에 저장합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pRndEnv-&gt;</span><span
lang=EN-US style='color:#880000'>BeginCube</span><span lang=EN-US>(m_pTxCbm);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(i=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; i&lt;</span><span
lang=EN-US style='color:red'>6</span><span lang=EN-US>; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pRndEnv-&gt;</span><span
lang=EN-US style='color:#880000'>Face</span><span lang=EN-US>( (</span><span
lang=EN-US style='color:#A000A0'>D3DCUBEMAP_FACES</span><span lang=EN-US>) i, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>RenderScene</span><span lang=EN-US>(
&amp;mtViw[i], &amp;mtPrj);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>m_pRndEnv-&gt;</span><span lang=EN-US
style='color:#880000'>End</span><span lang=EN-US>(</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image104.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Cube Map</span>을 사용한 반사 효과<span
lang=EN-US>: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht25_env2_cube3.zip">ht25_env2_cube3.zip</a>
Key-&quot;1&quot;&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Cube Map</span>을 사용하면 굴절 효과도 구현할 수 있습니다<span
lang=EN-US>. </span>간단한 파동의 굴절 법칙은<span lang=EN-US> Snell</span>의 법칙을 사용합니다<span
lang=EN-US>. Snell</span>의 법칙은 매질<span lang=EN-US> n<sub>1</sub></span>과<span
lang=EN-US> n<sub>2</sub></span>에 대해서 입사각 <span lang=EN-US>θ<sub>1</sub></span>와
굴절각 <span lang=EN-US>θ<sub>2</sub></span>에 대해서 다음과 같은 관계식을 표현한 것입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><i><span lang=EN-US>Snell</span>의
법칙<span lang=EN-US>: n<sub>1</sub> * sinθ<sub>1</sub> = n<sub>2</sub> * sinθ<sub>2</sub></span></i></p>

<p class=MsoNormal><i><span lang=EN-US>&nbsp;</span></i></p>

<p class=MsoNormal>이 법칙을 이용해서 우리는 입사된 빛의 방향 대신 시선 벡터<span lang=EN-US>, </span>법선
벡터<span lang=EN-US>, </span>그리고 매질<span lang=EN-US> n<sub>1</sub></span>과<span
lang=EN-US> n<sub>2</sub></span>를 가지고 굴절 벡터 <i><span lang=EN-US><sub><img
border=0 width=13 height=21 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image105.gif"></sub></span></i>를
구할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i><span lang=EN-US><sub><img border=0 width=172 height=25
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image106.gif"></sub></span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=40 height=23
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image107.gif"></sub></span>는<span lang=EN-US> Snell</span>의
법칙에서 얻고 <span lang=EN-US><sub><img border=0 width=41 height=23
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image108.gif"></sub></span>는 <span lang=EN-US><sub><img
border=0 width=80 height=29 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image109.gif"></sub></span>으로
구합니다<span lang=EN-US>. </span>또한 <span lang=EN-US><sub><img border=0 width=39
height=23 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image110.gif"></sub></span>은 <span
lang=EN-US><sub><img border=0 width=13 height=17
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image111.gif"></sub></span>방향에 대한 길이와 같고 <span
lang=EN-US><sub><img border=0 width=13 height=17
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image111.gif"></sub>&nbsp;</span>방향의 벡터는 법선 벡터와 시선 벡터로 다음과
같이 구할 수 있고 이 벡터의 길이가 <span lang=EN-US><sub><img border=0 width=39 height=23
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image110.gif"></sub></span>가 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=13 height=17
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image111.gif"></sub>&nbsp;</span>방향의 벡터<span
lang=EN-US> = <sub><img border=0 width=88 height=25
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image112.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=39 height=23
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image110.gif"></sub>= Length(<sub><img border=0
width=13 height=17 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image111.gif"></sub> </span>방향의 벡터<span
lang=EN-US>) = Length(<sub><img border=0 width=88 height=25
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image112.gif"></sub>)</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=109 height=23
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image113.gif"></sub>( k = n<sub>1</sub>/ n<sub>2</sub>),
<sub><img border=0 width=136 height=29 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image114.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것을<span lang=EN-US> HLSL</span>로 바꾸는 작업이 필요한데 픽셀 기반 조명에서처럼 정점
처리 과정은 법선과 시선 벡터만 구하고 굴절 벡터는 픽셀 처리 과정에서 구하기 위해서 정점 처리 결과를 저장할 구조체에 시선 벡터와 법선 벡터를
저장할 수 있도록 선언합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>SVsOut</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>&nbsp; Pos : </span><span
lang=EN-US style='color:blue'>POSITION0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US>&nbsp; Eye : </span><span
lang=EN-US style='color:blue'>TEXCOORD6</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>시선</span> <span
style='color:green'>벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US>&nbsp; Nor : </span><span
lang=EN-US style='color:blue'>TEXCOORD7</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>정점 처리 함수는 법선 벡터의 뷰 공간 변환<span
lang=EN-US>, </span>시선 벡터의 뷰 공간 변환만 수행하고 이것을 출력 구조체에 저장합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>//</span><span style='color:green'>정점 처리 함수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> Nor : </span><span
lang=EN-US style='color:blue'>NORMAL0</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>SVsOut</span><span lang=EN-US> Out = (</span><span
lang=EN-US style='color:blue'>SVsOut</span><span lang=EN-US>)</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>&nbsp; P = </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>(Pos,</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US>&nbsp; N = Nor;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US>&nbsp; E = </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; N
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(N,
m_mtWld);&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>법선 벡터의 월드 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; N
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(N,
m_mtViw);&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>법선 벡터의 뷰 공간 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; N
= </span><span lang=EN-US style='color:#880000'>normalize</span><span
lang=EN-US>(N);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>정규화</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(P,
m_mtWld);&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>위치 벡터의 월드 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(P,
m_mtViw);&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>위치 벡터의 뷰 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; E
= -</span><span lang=EN-US style='color:#880000'>normalize</span><span
lang=EN-US>(P);&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>시선 벡터는 뷰 변환된 위치 벡터의 정규화와
같음</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Eye
= E;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>시선 벡터 복사</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Nor
= N;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터 복사</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>픽셀 처리과정은<span lang=EN-US> Snell</span>의 법칙으로 굴절 벡터를 구하고 이 벡터를<span
lang=EN-US> HLSL</span>의<span lang=EN-US> texCUBE() </span>함수의 인수로 전달하는 과정입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>먼저 <span lang=EN-US>static</span>을 사용해서 두 매질에 대해서 정의 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>static</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; n1 = </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>00</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// n1 </span><span style='color:green'>매질 굴절률</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>static</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; n2 = </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>02</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// n2 </span><span style='color:green'>매질 굴절률</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>픽셀 처리함수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:#880000'>PxlPrc</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>SVsOut</span><span lang=EN-US> In) : </span><span
lang=EN-US style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> E = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(In.Eye); </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>입력된 시선 벡터의 정규화</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> N = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(In.Nor); </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>입력된 법선 벡터의 정규화</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> F = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>굴절 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> X = </span><span
lang=EN-US style='color:#880000'>dot</span><span lang=EN-US>(E, N) * N - E; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선에 수직인<span
lang=EN-US> x </span>방향의 벡터</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> sin_theta1 = </span><span
lang=EN-US style='color:#880000'>length</span><span lang=EN-US>(-X); </span><span
lang=EN-US style='color:green'>// sinθ<sub>1</sub> </span><span
style='color:green'>를 구함</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> k = n1/n2; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>매질의 비율을 구함</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> sin_theta2 = k *
sin_theta1;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>스넬 법칙으로 <span lang=EN-US>sinθ<sub>2</sub> </span>를 구함</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// cosθ<sub>2</sub> </span><span
style='color:green'>를 구함</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> cos_theta2 = </span><span
lang=EN-US style='color:#880000'>sqrt</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US> - sin_theta2 * sin_theta2);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X
= </span><span lang=EN-US style='color:#880000'>normalize</span><span
lang=EN-US>(X);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// X </span><span style='color:green'>방향의 벡터를 정규화</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정규화된<span
lang=EN-US> X </span>방향의 벡터<span lang=EN-US>, </span>법선 벡터<span lang=EN-US>,
cosθ<sub>2</sub>, sinθ<sub>2</sub> </span>를 가지고</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>굴절 벡터를 구함</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F
= (-N) * cos_theta2 + X * sin_theta2; </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= </span><span lang=EN-US style='color:#880000'>texCUBE</span><span lang=EN-US>(
SmpCbm, F);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Snell</span>의 법칙을
사용해서 굴절 벡터를 직접 구현 했는데<span lang=EN-US> HLSL</span>은 반사에 대한<span lang=EN-US>
reflect() </span>함수가 있듯이 굴절에 대한<span lang=EN-US> refract() </span>함수가 있습니다<span
lang=EN-US>. reflect() </span>함수와 <span lang=EN-US>refract() </span>함수를 사용해서 이전의
쉐이더 코드를 다음과 같이 대처할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> k = n1/n2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>굴절 비율</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R = </span><span
lang=EN-US style='color:#880000'>reflect</span><span lang=EN-US>(-E, </span><span
lang=EN-US style='color:blue'>N</span><span lang=EN-US>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>반사 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F
= </span><span lang=EN-US style='color:#880000'>refract</span><span lang=EN-US>(-E,
</span><span lang=EN-US style='color:blue'>N</span><span lang=EN-US>, k);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>굴절 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><a
href="https://github.com/3dapi/dv16_shader3/raw/master/ht25_env2_cube3.zip">ht25_env2_cube3.zip</a> </span>는<span lang=EN-US>
Cube Map</span>을 이용해서 반사와 굴절 효과를 표현한 예입니다<span lang=EN-US>. </span>숫자 키<span
lang=EN-US> 1</span>을 누르면 반사효과를<span lang=EN-US>, </span>숫자 키<span lang=EN-US>
2</span>를 누르면 굴절 효과를 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=182
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image115.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Cube Map</span>을 사용한 굴절 효과<span
lang=EN-US>: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht25_env2_cube3.zip">ht25_env2_cube3.zip</a>
Key-&quot;2&quot;&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Cube Map</span>은 반사와 굴절 모두를 표현할 수 있어서 플라스틱 병과
같은 거의 투명한 물체를 쉽게 표현할 수 있습니다<span lang=EN-US>. </span>이런 물체들은 빛의 입사각이 작으면 투과율이 높고
입사각이 크면 반사율이 높습니다<span lang=EN-US>. </span>입사각은 시선 벡터와 법선 벡터의 내적으로 구할 수 있으므로 투과율<span
lang=EN-US>(</span>또는 비중<span lang=EN-US>)</span>을 이 둘의 벡터의 내적의 제곱으로 간단히 결정해 보도록
합시다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>투과율<span lang=EN-US>(w) :</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>w
= dot(</i></span><i>반사 벡터 또는 시선<span lang=EN-US>, </span>법선 벡터<span lang=EN-US>);</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>w
= w*w;</i></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>또한 렌더링 물체에 약간의<span lang=EN-US> Diffuse Map</span>을 적용하면 사실감을
더 높일 수 있으며 <span lang=EN-US><a href="https://github.com/3dapi/dv16_shader3/raw/master/ht25_env2_cube4.zip">ht25_env2_cube4.zip</a></span>는
반사<span lang=EN-US>+</span>굴절 효과에<span lang=EN-US> Diffuse Map</span>을<span
lang=EN-US> 20% </span>적용해서 구현한 예제입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image116.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Cube Map</span>을 사용한 반사<span
lang=EN-US> + </span>굴절<span lang=EN-US> + Diffuse Map </span>효과<span
lang=EN-US>: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht25_env2_cube4.zip">ht25_env2_cube4.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Cube Map</span>을 사용한 환경 매핑은 법선 벡터를 사용하기 때문에
이 법선 벡터에 대해서<span lang=EN-US> Normal Map</span>을 적용하면 올록볼록한 표면의 반사와 굴절을 만들 수 있습니다<span
lang=EN-US>. <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht25_env2_cube5.zip">ht25_env2_cube5.zip</a></span>는<span
lang=EN-US> Normal Map</span>을 법선 벡터로 사용해서 환경 매핑을 구현한 예제입니다<span lang=EN-US>. </span>텍스처에서
법선 벡터를 구하는 함수는 이전의 범프 효과<span lang=EN-US>(Bump Effect)</span>에서 사용한 함수를 거의 그대로 사용했습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image117.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Cube Map+Normal Map</span>을 사용한 반사<span
lang=EN-US> + </span>굴절 효과<span lang=EN-US>: <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht25_env2_cube5.zip">ht25_env2_cube5.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>범프 맵을 결합한 환경 매핑의 응용으로 물에 대한 반사 효과를 만들 수 있습니다<span
lang=EN-US>. </span>물에 대한 효과는 파동 방정식<span lang=EN-US>(Wave Equation), </span>반사<span
lang=EN-US>, </span>그리고 굴절에 대한 적절한 수식을 필요하기 때문에 향상된 기술을 선보이기 위해서<span
lang=EN-US> 3D</span>의 예제로 가장 많이 구현되고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>보통 파동 방정식의 미분 방정식 형태는 다음과 같이 주어집니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=116 height=44
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image118.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 미분 방정식을 풀기 위해서 조화 진동자<span lang=EN-US>(Harmonic Oscillator)
</span>모델을 사용하고 있으며 점성<span lang=EN-US>(Damping)</span>이 있는 조화 진동자의 풀이는<span
lang=EN-US> exp() </span>함수의 결합 형태로 풀이가 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=55 height=21
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image119.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>또한 푸아송 방정식에 의해서 하나의 파동은 여러 파동의 중첩<span lang=EN-US>(Super
Position)</span>으로 풀이가 가능하고 이 것을 적용하면 파동에 대한 최종 해는 각각의 파동을 더한 결과가 됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=84 height=42
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image120.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>바다와 호수 등의 파동을 만드는 주요 요인은 바람입니다<span lang=EN-US>. </span>이 바람을
이용해서 수면의 운동을 구현하는 것이 가장 바람직할 수 있지만 여기서는 예제 수준 정도로만 만들어 보기 위해서 <span lang=EN-US>4</span>개의
돌이 위 아래로 움직이고 이 돌에 의해 파동이 만들어지는 것을 가지고 물에 대한 효과를 만들어 보겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>물 분자의 운동은 격자가 일정한 정점의 위<span lang=EN-US>, </span>아래 움직임으로 표현할
수 있습니다<span lang=EN-US>. </span>그런데 정점 버퍼 또는 시스템 메모리에 만든 정점의 모든 위치를 직접 변경하는 것은 교체에
대한 부담이 큽니다<span lang=EN-US>. </span>따라서 정점 쉐이더에서 출력 위치의 수식을 만들어서 바꾸는 것이 좋습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=63 height=25
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image121.gif"></sub></span>의 간단한 형태는 <span lang=EN-US><sub><img
border=0 width=129 height=28 src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image122.gif"></sub>&nbsp;</span>가
되고 이것을<span lang=EN-US> HLSL</span>로 쉽게 작성할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:#880000'>WavePos</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> Pos, </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> eps=</span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>))</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tPos.y += </span><span
lang=EN-US style='color:#A000A0'>exp</span><span lang=EN-US>(-wvK.x * r)*</span><span
lang=EN-US style='color:#880000'>sin</span><span lang=EN-US>(r * wvOmega.x -
m_fTime * wvSpeed.x);</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이<span lang=EN-US> HLSL</span>을 <span lang=EN-US><a
href="https://github.com/3dapi/dv16_shader3/raw/master/ht25_env2_water1.zip">ht25_env2_water1.zip</a> </span>예제에 적용하면 <span
lang=EN-US><a href="https://github.com/3dapi/dv16_shader3/raw/master/ht25_env2_water2.zip">ht25_env2_water2.zip</a></span>와 같이 물결이
출렁이는 효과를 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=212 height=161
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image123.gif">&nbsp;<img border=0 width=212 height=161
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image124.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>수면의 파동<span lang=EN-US>. <a
href="https://github.com/3dapi/dv16_shader3/raw/master/ht25_env2_water1.zip">ht25_env2_water1.zip</a>, <a
href="https://github.com/3dapi/dv16_shader3/raw/master/ht25_env2_water2.zip">ht25_env2_water2.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>정점의 움직임을 완성했고 다음으로 수면의 반사와 굴절을 처리할
차례입니다<span lang=EN-US>. </span>이것은 이전의 범프 매핑을 거의 그대로 이용하는 것이 좋습니다<span
lang=EN-US>. </span>동적인 효과를 만들기 위해서 정점의<span lang=EN-US> UV </span>좌표가 시간에 의존하게
하는 것이 좋으며 또한 한 방향 보다 여러 방향으로 설정하는 것이 더 효과적입니다<span lang=EN-US>. </span>이를 정점 처리
함수에 적용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>SVsOut</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US> iPos : POSITION0)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US>&nbsp; wvSpdU=</span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>02f</span><span lang=EN-US>, +</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>02f</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US>&nbsp; wvSpdV=</span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>02f</span><span lang=EN-US>, -</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>02f</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> Time = m_fTime;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US>&nbsp; Tex= </span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US>&nbsp; Ds1; &nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Distortion UV1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US>&nbsp; Ds2; &nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Distortion UV2</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tex.x
= iPos.x/</span><span lang=EN-US style='color:red'>16</span><span lang=EN-US>.;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tex.y
= </span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>- iPos.z/</span><span
lang=EN-US style='color:red'>16</span><span lang=EN-US>.;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ds1
= Tex.xy + wvSpdU * Time;  </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>시간에 의존하는 텍스처 좌표<span lang=EN-US>(UV1) </span>생성</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ds2
= Tex.yx + wvSpdV * Time;  </span><span lang=EN-US style='color:green'>// …</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Ds1
= Ds1;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Ds2
= Ds2;</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>빛의 반사와 굴절은 프레넬<span lang=EN-US>(Fresnel) </span>방정식으로 풀이 되며 프레넬
방정식의 근사식은 다음과 구할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i><span lang=EN-US>Fresnel </span>근사식<span lang=EN-US> = F
+ (1-F)*cos</span>θ<span lang=EN-US>^5</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>게임은 현실의 적당한 흉내내기 이므로 굴절률<span lang=EN-US> n1, n2</span>가 주어질
때 좀 더 간단한 형태의 프레넬 방정식을 만들 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i><span lang=EN-US>Simple Fresnel F = pow*(n2/n1-dot(-E,N))</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 근사식을 픽셀 처리 함수에 적용해서 반사 계수로 사용해서 굴절 효과까지 만들어야 하는데 여기서는 반투명 계수
정도로만 사용하도록 하겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:#880000'>PxlPrc</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>SVsOut</span><span lang=EN-US> In) : </span><span
lang=EN-US style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> E = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(In.Eye);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>&nbsp; F;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; n1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; n2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>333</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Calculate Simple Fresnel = (F - I.N)^2</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F&nbsp;
= </span><span lang=EN-US style='color:#880000'>pow</span><span lang=EN-US>(F -
dot(-E, N), </span><span lang=EN-US style='color:red'>2</span><span lang=EN-US>);
</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= texCUBE( SmpCbm, R);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.a
= F;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>내용은 약간 길지만 어렵지 않으므로 전체 코드는 <span lang=EN-US><a
href="https://github.com/3dapi/dv16_shader3/raw/master/ht25_env2_water4.zip">ht25_env2_water4.zip</a></span>를 참고하길 바랍니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image125.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>수면 반사 효과<span lang=EN-US>: <a
href="https://github.com/3dapi/dv16_shader3/raw/master/ht25_env2_water4.zip">ht25_env2_water4.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.5 </span><span
style='font-size:14.0pt'>깊이 버퍼 그림자</span></p>

<p class=MsoNormal>그림자를 게임의<span lang=EN-US> 3D </span>장면에 구현하는 것은 게임을 만드는 과정 중에서
프로그래머에게 기쁨을 주는 작업 중의 하나 입니다<span lang=EN-US>. </span>현재 그림자를 만드는 방법은 간단한 원형 이미지를
캐릭터의 발 밑에 렌더링 하거나<span lang=EN-US> 3D </span>물체를<span lang=EN-US> 2</span>차원 평면
텍스처에 저장하고 이 텍스처를 매핑 하는 투영 그림자 매핑 방법이 있습니다<span lang=EN-US>. </span>하드웨어 성능이 좋다면
좀더 향상된 방법으로 광원의 위치와 방향에 대해서<span lang=EN-US> 3D </span>물체의 깊이를 텍스처로 저장하고 이 텍스처의
깊이에 따라 그림자를 표현하는 깊이 버퍼 그림자가 있습니다<span lang=EN-US>. </span>또한 오래 전부터 사용되고 있으며 가장
멋진 그림자를 만드는 부피 그림자<span lang=EN-US>(Volume Shadow)</span>가 있습니다<span
lang=EN-US>. </span>이 방법은 이전<span lang=EN-US> 3D </span>기초 시간에서 프레임 버퍼의 스텐실 버퍼를
사용해서 구현해 보았습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>하드웨어<span lang=EN-US>, 3D </span>장면에 소모되는 그래픽 리소스<span
lang=EN-US>, </span>장르 등에 따라서 간단한 그림자를 선택하거나 아니면 사실감 있는 그림자를 만들 수 있는데 그림자를 표현 하지
않는 것보다 어떤 식으로든 표현하는 쪽이 게임의 사실감을 더 높여 줍니다<span lang=EN-US>. </span>이것은 조명과 비슷해서 조명을
사용함으로써 부피 느낌을 만들 듯이 그림자는 객체와 주변의 환경에 대해서 공간 느낌을 형성하기 때문입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>여러 가지의 그림자를 구현 방법 중에서 원형 그림자는 구현 방법이 쉽기 때문에 그냥 넘어가겠습니다<span
lang=EN-US>. </span>대신 쉐이더를 사용해야 쉽게 만들 수 있는 깊이 버퍼 그림자를 먼저 구현해 보도록 하겠습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>깊이 버퍼 그림자의 원리는 의외로 간단합니다<span lang=EN-US>. </span>그림처럼 만약 현재의
정점과 조명 사이에 어떤 정점이 존재하면 디퓨즈 색상을 어둡게 처리하는 것입니다<span lang=EN-US>. </span>예를 들어 그림의<span
lang=EN-US> A, B, C </span>픽셀을 조명에서 바라본 깊이 값을<span lang=EN-US> d1, d2, d3</span>로
계산이 되었다고 합시다<span lang=EN-US>. </span>다음으로 조명에서 바라본 최종 깊이 값을 결정할 때 픽셀<span
lang=EN-US> B</span>는 픽셀<span lang=EN-US> A</span>로 가려지기 때문에 최종 깊이 값을<span
lang=EN-US> d2 </span>가 아닌<span lang=EN-US> d1</span>을 가지도록 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=528 height=189
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image126.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>깊이 버퍼 그림자의 원리<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>깊이 버퍼 그림자의 원리는 이렇게 조명에서 바라본 최종 깊이 값을 먼저 구성하고 다시 원래의 깊이 값과 비교를
하는 것입니다<span lang=EN-US>. A</span>와<span lang=EN-US> C </span>픽셀은 깊이 값의 변화가 없지만
픽셀<span lang=EN-US> B</span>는 자신의 깊이 값<span lang=EN-US> d2</span>보다 최종 깊이 값<span
lang=EN-US> d1</span>이 작으므로 그림자 적용 대상이 되는 픽셀이 되는 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>간단한 내용이지만 어떻게 조명에서 바라본 최종 깊이 값들을 만들 수 있을 까요<span lang=EN-US>?
</span>우리는 이전 쉐이더 기초 시간에 장면의 깊이 값을 텍스처에 저장하는 방법을 알고 있습니다<span lang=EN-US>. </span>즉<span
lang=EN-US>, </span>디바이스의 파이프 라인을 이용해서 조명의 위치와 방향에 의존하는 뷰 행렬과 투영 행렬을 가지고 뷰 변환<span
lang=EN-US>, </span>정규 변환에 적용해서 장면에 사용된 물체들의 위치를 텍스처에 저장하는 것입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>그 다음으로 조명의 위치로부터 깊이를 다시 계산하고 이 값을 깊이가 저장된 텍스처의 값과 비교해서 값이 텍스처의
값보다 크면 그림자가 적용되는 픽셀로 판정을 합니다<span lang=EN-US>. </span>이 판정을 위해서 정점 쉐이더에서는 조명의 뷰
행렬<span lang=EN-US>, </span>투영 행렬로 렌더링 물체의 깊이를 계산하고 이 값을 픽셀 쉐이더로 넘깁니다<span
lang=EN-US>. </span>픽셀 쉐이더 함수는 깊이가 저장된 텍스처에 색상을 추출해서 정점 처리에서 넘어온 값과 비교하는 코드를 작성합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>지금까지 깊이 버퍼 그림자를 구현 하는 내용을 간단히 살펴보았습니다<span lang=EN-US>. </span>이
내용을 구체적으로 구현하도록 하겠습니다<span lang=EN-US>. </span>첫 번째 해야 할 일은 조명의 위치와 방향으로 미리 저장된
텍스처가 존재한다는 가정 하에 이것을 그림자가 적용될 물체에 매핑 하도록 하는 것입니다<span lang=EN-US>. </span>이 방법은<span
lang=EN-US> 3D </span>기초 시간에 연습했던 투영 매핑과 동일 하며 우리는 모든 처리를 쉐이더를 사용할 것이므로 고정 기능 파이프라인에서
구현된 투영 매핑을<span lang=EN-US> HLSL</span>로 변환해 보는 것이 중요합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>모델 좌표계에 존재하는 정점을 화면에 연출하기 위해서 우리는<span lang=EN-US> 3D </span>장면을
구성하는 월드의 행렬을 적용한 월드 변환<span lang=EN-US>, </span>카메라의 공간으로 변환하는 뷰 변환<span
lang=EN-US>, </span>그리고 정규 또는 투영 변환을 작성해야 했습니다<span lang=EN-US>. </span>투영 매핑은 장면의
뷰<span lang=EN-US>, </span>투영 행렬 대신 조명의 위치와 방향으로 구성된 조명의 뷰 행렬과 투영 행렬을 사용하고 이 변환을
거친 위치를 텍스처 좌표로 사용하는 것이며 이 과정을 위해서 다음과 같이 최소한<span lang=EN-US> 5</span>개의 행렬이 필요합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4x4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_mtWld;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>월드 변환 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4x4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_mtViw;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>카메라 뷰 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4x4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_mtPrj;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 3D </span><span style='color:green'>장면의 투영 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4x4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_mtSdV;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>조명의 위치와 방향으로
만든 뷰 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4x4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_mtSdP;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>조명의 투영 변환 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>속도의 향상을 위해서 월드 변환 행렬<span
lang=EN-US> * </span>카메라 뷰 행렬<span lang=EN-US> * 3D </span>장면의 투영 행렬을 미리 곱한 행렬과
월드 변환 행렬<span lang=EN-US> * </span>조명의 뷰 행렬<span lang=EN-US>&nbsp; * </span>조명의
투영 행렬을 곱한<span lang=EN-US> 2</span>개의 행렬을 쉐이더로 전달할 수도 있지만 여기는 구현의 내용에 초점을 두었기 때문에<span
lang=EN-US> 5</span>개의 행렬을 사용하고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>정점 쉐이더 함수는 정점의 위치를 입력 받고<span
lang=EN-US>, </span>이 위치를 가지고 출력 위치와 텍스처 좌표를 만듭니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:#A000A0'>in</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> iPos : </span><span
lang=EN-US style='color:blue'>POSITION0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>입력<span
lang=EN-US>: </span>정점의 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&nbsp;
</span><span lang=EN-US style='color:#A000A0'>out</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> oPos : </span><span
lang=EN-US style='color:blue'>POSITION0</span><span lang=EN-US> </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력<span
lang=EN-US>: </span>변환된 정점의 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&nbsp;
</span><span lang=EN-US style='color:#A000A0'>out</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US> oTex : </span><span
lang=EN-US style='color:blue'>TEXCOORD0</span><span lang=EN-US> </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력<span
lang=EN-US>: </span>텍스처 좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PosW
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(iPos,
m_mtWld);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PosT
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(PosW,
m_mtViw);&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// 3D </span><span
style='color:green'>장면에 대한 뷰 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PosT
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(PosT,
m_mtPrj); &nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// 3D </span><span
style='color:green'>장면에 대한 투영 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oPos
= PosT;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 위치 설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>이곳까지의<span lang=EN-US> HLSL </span>코드는
정점의 월드<span lang=EN-US>, </span>뷰<span lang=EN-US>, </span>투영 변환에 해당합니다<span
lang=EN-US>. </span>다음으로 텍스처의 매핑에 사용되는<span lang=EN-US> UV </span>좌표를 설정하는 단계인데
장면 연출과 동일하게 월드 변환을 진행하고 다음으로 조명에 의존하는 뷰와 투영 행렬 변환을 수행합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PosT
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(PosW,
m_mtSdV);&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>조명에 대한 뷰 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PosT
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(PosT,
m_mtSdP); &nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>조명에 대한 투영 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>3D</span>에서 그래픽
파이프라인의 정규 또는 투영 변환을 거치면<span lang=EN-US> x, y </span>값은<span lang=EN-US> [-1,
1] </span>범위의 값으로 정규화 됩니다<span lang=EN-US>. </span>그런데 텍스처 좌표는<span lang=EN-US>
[0, 1] </span>이므로 정규 변환을 통과한<span lang=EN-US> x </span>값은<span lang=EN-US> [0,
1], y </span>값은<span lang=EN-US> [1, 0] </span>범위로 조정해야 합니다<span lang=EN-US>. </span>조정된
값을 텍스처 좌표로 출력 레지스터에 쓰기만 하면 정점의 위치를 깊이 버퍼 그림자의 텍스처 좌표로 만드는 과정이 끝나게 됩니다<span
lang=EN-US>. </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PosT.x
= (</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> + PosT.x) * </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5F</span><span lang=EN-US>; </span><span lang=EN-US
style='color:green'>// x </span><span style='color:green'>위치<span lang=EN-US>
[-1,1]</span>에서<span lang=EN-US> [0,1]</span>로 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PosT.y
= (</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> - PosT.y) * </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5F</span><span lang=EN-US>; </span><span lang=EN-US
style='color:green'>// y </span><span style='color:green'>위치<span lang=EN-US>
[-1,1]</span>에서<span lang=EN-US> [1,0]</span>로 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oTex
= PosT;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>텍스처 좌표 설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>이 과정도 행렬을 사용할 때도 있습니다<span
lang=EN-US>. </span>이 때 여러분은 다음과 같이 행렬을 만들어서<span lang=EN-US> PotT</span>에 곱해야 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=FR style='color:blue'>D3DXMATRIX</span><span lang=FR style='color:black'> </span><span
lang=FR style='color:#880000'>mtTex</span><span lang=FR style='color:black'>(</span><span
lang=FR style='color:red'>0</span><span lang=FR style='color:black'>.</span><span
lang=FR style='color:red'>5F</span><span lang=FR style='color:black'>,&nbsp; </span><span
lang=FR style='color:red'>0</span><span lang=FR style='color:black'>.</span><span
lang=FR style='color:red'>0F</span><span lang=FR style='color:black'>, </span><span
lang=FR style='color:red'>0</span><span lang=FR style='color:black'>.</span><span
lang=FR style='color:red'>0F</span><span lang=FR style='color:black'>, </span><span
lang=FR style='color:red'>0</span><span lang=FR style='color:black'>.</span><span
lang=FR style='color:red'>0F</span><span lang=FR style='color:black'>,</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=FR style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span><span
lang=FR style='color:red'>0</span><span lang=FR style='color:black'>.</span><span
lang=FR style='color:red'>0F</span><span lang=FR style='color:black'>, -</span><span
lang=FR style='color:red'>0</span><span lang=FR style='color:black'>.</span><span
lang=FR style='color:red'>5F</span><span lang=FR style='color:black'>, </span><span
lang=FR style='color:red'>0</span><span lang=FR style='color:black'>.</span><span
lang=FR style='color:red'>0F</span><span lang=FR style='color:black'>, </span><span
lang=FR style='color:red'>0</span><span lang=FR style='color:black'>.</span><span
lang=FR style='color:red'>0F</span><span lang=FR style='color:black'>,</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=FR style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span><span
lang=FR style='color:red'>0</span><span lang=FR style='color:black'>.</span><span
lang=FR style='color:red'>0F</span><span lang=FR style='color:black'>,&nbsp; </span><span
lang=FR style='color:red'>0</span><span lang=FR style='color:black'>.</span><span
lang=FR style='color:red'>0F</span><span lang=FR style='color:black'>, </span><span
lang=FR style='color:red'>1</span><span lang=FR style='color:black'>.</span><span
lang=FR style='color:red'>0F</span><span lang=FR style='color:black'>, </span><span
lang=FR style='color:red'>0</span><span lang=FR style='color:black'>.</span><span
lang=FR style='color:red'>0F</span><span lang=FR style='color:black'>,</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=FR style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span><span
lang=FR style='color:red'>0</span><span lang=FR style='color:black'>.</span><span
lang=FR style='color:red'>5F</span><span lang=FR style='color:black'>,&nbsp; </span><span
lang=FR style='color:red'>0</span><span lang=FR style='color:black'>.</span><span
lang=FR style='color:red'>5F</span><span lang=FR style='color:black'>, </span><span
lang=FR style='color:red'>0</span><span lang=FR style='color:black'>.</span><span
lang=FR style='color:red'>0F</span><span lang=FR style='color:black'>, </span><span
lang=FR style='color:red'>1</span><span lang=FR style='color:black'>.</span><span
lang=FR style='color:red'>0F&nbsp; </span><span lang=FR style='color:black'>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>텍스처 좌표가<span lang=EN-US> [0, 1] </span>넘어서는
값들은 그림자를 적용할 필요가 없음으로 샘플러의 어드레스 모드를<span lang=EN-US> Border </span>또는<span
lang=EN-US> Clamp</span>로 설정할 수 있지만<span lang=EN-US> Border</span>로 설정하는 것이 좋고<span
lang=EN-US> Border </span>색상을<span lang=EN-US> 0xFFFFFFFF</span>로 정합니다<span
lang=EN-US>. </span>쉐이더의 색상은<span lang=EN-US> 1.0 </span>이고 정규화된 깊이는 최대<span
lang=EN-US> 1.0 </span>이기 때문에<span lang=EN-US> 0xFFFFFFFF </span>값은 깊이 값을<span
lang=EN-US> 1</span>로 설정하는 것과 같은 의미입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> SmpDif : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>s0</span><span lang=EN-US>) = </span><span
lang=EN-US style='color:blue'>sampler_state</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AddressU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:#A000A0'>Border</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AddressV&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:#A000A0'>Border</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BorderColor&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:red'>0xFFFFFFFF</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=244 height=183
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image127.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>이미지 투영<span lang=EN-US>: </span>정점
위치를 텍스처 좌표계로 사용한 예<span lang=EN-US>. <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht26_shadow0.zip">ht26_shadow0.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>텍스처를 깊이 버퍼 그림자 매핑을 만들어 보았습니다<span lang=EN-US>. </span>이제 깊이 버퍼
그림자의 첫 번째 단계인 깊이 값 저장을 구현해 보겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>게임에서 깊이는 최소한<span lang=EN-US> 16</span>비트 이상을 사용합니다<span
lang=EN-US>. </span>따라서 이 정도의 깊이를 저장할 수 있는 해상도가 높은 텍스처를 사용해야 하는데<span
lang=EN-US> R8G8B8 </span>형식의 텍스처보다<span lang=EN-US> R16G16B16, R32G32B32 </span>형식의
텍스처를 선택하거나 아니면 단일 색상으로<span lang=EN-US> 32</span>비트 정보를 저장할 수 있는<span
lang=EN-US> D3DFMT_D32F </span>형식의 텍스처를 깊이 텍스처로 선택하는 것이 중요합니다<span lang=EN-US>.
</span>그리고 텍스처를 생성하기 위해서 여러분은<span lang=EN-US> D3D Device</span>의 멤버 함수<span
lang=EN-US> CreateTexture() </span>함수를 사용하는 것보다<span lang=EN-US>
D3DXCreateTexture() </span>함수를 사용하는 것이 안전합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>D3DXCreateTexture</span><span
lang=EN-US>(…, </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>D3DUSAGE_RENDERTARGET</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>D3DFMT_R32F</span><span
lang=EN-US>, …);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>쉐이더 코드는 정점의 위치를 조명에 대한 뷰 행렬과 투영 행렬을 적용해서<span lang=EN-US> 1</span>차원
텍스처 좌표로 출력 합니다<span lang=EN-US>. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxShadowMap</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>in</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> iPos : </span><span
lang=EN-US style='color:blue'>POSITION0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:#A000A0'>out</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> oPos : </span><span
lang=EN-US style='color:blue'>POSITION0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:#A000A0'>out</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>&nbsp; oTex : </span><span
lang=EN-US style='color:blue'>TEXCOORD0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pos&nbsp;
= </span><span lang=PT-BR style='color:#A000A0'>mul</span><span lang=PT-BR>(iPos,
m_mtWld);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pos&nbsp;
= </span><span lang=PT-BR style='color:#A000A0'>mul</span><span lang=PT-BR>(Pos,&nbsp;
m_mtSdV); &nbsp;&nbsp; </span><span lang=PT-BR style='color:green'>// </span><span
style='color:green'>조명에</span><span style='color:green'> </span><span
style='color:green'>대한</span><span style='color:green'> </span><span
style='color:green'>뷰</span><span style='color:green'> </span><span
style='color:green'>변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pos&nbsp;
= </span><span lang=PT-BR style='color:#A000A0'>mul</span><span lang=PT-BR>(Pos,&nbsp;
m_mtSdP); &nbsp;&nbsp; </span><span lang=PT-BR style='color:green'>// </span><span
style='color:green'>조명에</span><span style='color:green'> </span><span
style='color:green'>대한</span><span style='color:green'> </span><span
style='color:green'>투영</span><span style='color:green'> </span><span
style='color:green'>변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oPos
= Pos;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oTex
= Pos.z/Pos.w;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>이<span lang=EN-US> HLSL </span>코드는<span
lang=EN-US> 3D </span>장면 연출에서 사용되는 변환 과정과 동일하고 단지 차이라면 마지막 줄에서 텍스처 좌표를 변환 된 위치의<span
lang=EN-US> &quot;z&quot;</span>값을<span lang=EN-US> &quot;w&quot;</span>값으로 나누는
것입니다<span lang=EN-US>. </span>이렇게 하면 텍스처의 좌표는<span lang=EN-US> [0, 1] </span>값으로
정규화 됩니다<span lang=EN-US>. </span>때로는 정규화 시키지 않고 그대로 픽셀 쉐이더로 넘기는 것도 생각할 수 있지만 다른
작업과 협업을 생각하면 정규화 하는 것이 좋습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>이렇게 정점에서 처리한<span lang=EN-US> 1</span>차원
깊이 값을 픽셀 쉐이더 함수는 전달 받아서 이<span lang=EN-US> 1</span>차원 좌표 값을 색상으로 그대로 출력합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlShadowMap</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> Tex : </span><span
lang=EN-US style='color:blue'>TEXCOORD0</span><span lang=EN-US>) : </span><span
lang=EN-US style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Tex;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>만약 여러분이<span lang=EN-US> Target</span>을
<span lang=EN-US>R8G8B8 </span>형식을 사용했다면 이 부분에서 깊이 값들이 유실 될 수 있어서 그림자 처리를 제대로 수행
못할 수 있게 됩니다<span lang=EN-US>. </span>또한 정점 처리 함수에서 변환된 깊이 값의 <span lang=EN-US>Semantic</span>을<span
lang=EN-US> &quot;COLOR#&quot;</span>으로 설정하지 않고<span lang=EN-US>
&quot;TEXCOORD#&quot;</span>를 사용한 것은 특정 그래픽 카드는<span lang=EN-US>
&quot;COLOR#&quot;</span>로<span lang=EN-US> Semantic</span>을 설정하면 정점 처리 후에 픽셀 단계로
전달 할 때<span lang=EN-US> [0, 1] </span>범위로 정규화 하는 것도 있기 때문입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>이렇게 조명에서 바라본 정점의 최종 깊이 값을 파이프라인과
쉐이더를 사용해서 만들었습니다<span lang=EN-US>. </span>다음 단계는 최종 깊이 값과 현재의 깊이 값을 비교해서 그림자를 적용할
차례입니다<span lang=EN-US>. </span>픽셀 처리로 투영 매핑 좌표와 깊이 값을 저장할 수 있는 구조체를 선언 합니다<span
lang=EN-US>. </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> VsOut</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Dif : </span><span
lang=EN-US style='color:blue'>TEXCOORD1</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Diffuse </span><span style='color:green'>색상</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US> Shd : </span><span
lang=EN-US style='color:blue'>TEXCOORD2</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>그림자<span
lang=EN-US> UV</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>&nbsp; Dpc : </span><span
lang=EN-US style='color:blue'>TEXCOORD3</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>조명에서 바라본 현재의
깊이 값</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>앞서 현재의 깊이 값과 최종 깊이 값의 비교를 위해서 정점
처리 함수에서 현재의 깊이 값을 계산한다고 했습니다<span lang=EN-US>. </span>현재의 깊이 값은 조명의 뷰와 투영 행렬로 결정을
해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>VsOut </span><span
lang=EN-US style='color:#880000'>VtxShadowScene</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> iPos : </span><span
lang=EN-US style='color:blue'>POSITION0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> iNor : </span><span
lang=EN-US style='color:blue'>NORMAL0</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PosW
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(iPos,
m_mtWld);&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>위치의 월드 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PosT
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(PosW,
m_mtSdV);&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>조명에 대한 뷰 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PosT
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(PosT,
m_mtSdP);&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>조명에 대한 투영 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Dpc
= (PosT.z-</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>01</span><span lang=EN-US>)/PosT.w;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// shift: z-bias</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PosT.x
= (</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> + PosT.x) * </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5</span><span lang=EN-US>; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>투영 텍스처 좌표<span
lang=EN-US> X</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PosT.y
= (</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> - PosT.y) * </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5</span><span lang=EN-US>; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>투영 텍스처 좌표<span
lang=EN-US> Y</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Shd
= PosT;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>투영 텍스처 좌표 출력</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>정점의 투영 변환 후에<span lang=EN-US>
&quot;-</span><span lang=EN-US style='color:red'>0.01</span><span lang=EN-US>&quot;</span>를
더한 것은 픽셀 처리에서 텍스처에 저장된 최종 깊이 값과 비교를 할 때 비교 오차로 인해서 줄 무늬가 나타날 수 있기 때문입니다<span
lang=EN-US>. </span>이를 위해서<span lang=EN-US> z </span>값을 적당히 이동 시키는<span
lang=EN-US> z-bias</span>가 필요하며 이 값을 대충<span lang=EN-US> &quot;-</span><span
lang=EN-US style='color:red'>0.01</span><span lang=EN-US>&quot;</span>로 설정한 것입니다<span
lang=EN-US>. </span>정교한 프로그램이라면 이 부분도 깊이 값에 의존하도록 작성해야 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>픽셀 처리 함수는 정점 투영 텍스처 좌표를 가지고 최종 깊이를
저장한 텍스처에서 깊이 값을 가져옵니다<span lang=EN-US>. </span>다음으로 이 값을 정점 처리에서 전달된 깊이 값과 비교를 합니다<span
lang=EN-US>. </span>만약 정점 처리에서 전달된 값이 텍스처에서 추출한 값보다 크면 그림자를 적용할 픽셀로 결정이 됩니다<span
lang=EN-US>. </span>다음 쉐이더 코드에서는 이 값을<span lang=EN-US> 0.0</span>으로 정했습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlShadowScene</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>VsOut</span><span lang=EN-US> In) : </span><span
lang=EN-US style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>&nbsp; Out = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>투영 텍스처 좌표 출력</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; Shd = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>그림자 유무</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>텍스처에서 조명에서 바라본
최종 깊이 값 추출</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Shd
= </span><span lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(SmpShd,
In.Shd);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // </span><span
style='color:green'>정점 처리에서 만든 깊이 값과 비교</span></p>

<p class=MsoNormal><span lang=EN-US style='color:green'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
</span><span style='color:green'>정점 처리의 값보다 작으면 그림자를 적용할 대상으로</span></p>

<p class=MsoNormal><span lang=EN-US style='color:green'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
</span><span style='color:green'>색상을<span lang=EN-US> 0</span>으로 함</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(Shd &gt;= In.Dpc)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Shd
= </span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Shd
= </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out&nbsp;
= Shd * In.Dif;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image128.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>깊이 버퍼 그림자<span lang=EN-US>. <a
href="https://github.com/3dapi/dv16_shader3/raw/master/ht26_shadow1.zip">ht26_shadow1.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>그림자가 적용된 부분을 확대하면<span lang=EN-US> Aliasing</span>을 볼 수 있습니다<span
lang=EN-US>. </span>좀 더 부드러운 그림자를 만들기 위해서 픽셀 처리에서<span lang=EN-US> 9-CON
Sampling </span>등으로 간단하게 해결 할 수도 있습니다<span lang=EN-US>. 9-CON </span>샘플링은 현재의 픽셀과
인접한<span lang=EN-US> 8</span>개의 픽셀을 혼합하는 방법입니다<span lang=EN-US>. </span>계산을 빨리 하기
위해서<span lang=EN-US> 2</span>차원 좌표로 구성된<span lang=EN-US> 9</span>개의 좌표가 필요합니다<span
lang=EN-US>. </span>다음의<span lang=EN-US> 9-CON </span>샘플링 테이블은 깊이 버퍼 그림자 텍스처의 사이즈가<span
lang=EN-US> 1024x1024</span>이기 때문에 인접한 픽셀을 얻기 위해서<span lang=EN-US> 1/1024.0 </span>값을
사용하고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// 9-CON </span><span style='color:green'>샘플링 테이블</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>static</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>float2</span><span lang=EN-US> c[</span><span lang=EN-US
style='color:red'>9</span><span lang=EN-US>]=</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='text-indent:10.0pt;word-break:keep-all'><span
lang=EN-US>{-</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>./</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>., -</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>./</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>.}, {-</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>./</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>., </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>./</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>.}, {-</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>./</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>., </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>./</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>.},</span></p>

<p class=MsoNormal style='text-indent:10.0pt;word-break:keep-all'><span
lang=EN-US>{ </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>./</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>., -</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>./</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>.}, { </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>./</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>., </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>./</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>.}, { </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>./</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>., </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>./</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>.},</span></p>

<p class=MsoNormal style='text-indent:10.0pt;word-break:keep-all'><span
lang=EN-US>{ </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>./</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>., -</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>./</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>.}, { </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>./</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>., </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>./</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>.}, { </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>./</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>., </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>./</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>.},</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>9-CON </span>샘플링의
적용은<span lang=EN-US> 9</span>번 샘플링 해서 이 결과를 가지고 누적시켜서 그림자 적용을 결정합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlPrc</span><span lang=EN-US>(VsOut In, </span><span
lang=EN-US style='color:blue'>uniform</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>bool</span><span lang=EN-US> bTex=</span><span
lang=EN-US style='color:blue'>true</span><span lang=EN-US>) : </span><span
lang=EN-US style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Out = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>&nbsp; Shd = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>&nbsp; r = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> i=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;i&lt;</span><span
lang=EN-US style='color:red'>9</span><span lang=EN-US>; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r
= </span><span lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(SmpShd,
In.Shd + c[i]);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(r &gt;= In.Dpc)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Shd
+= </span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Shd
*= </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>1111f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= Shd * In.Dif;</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/dv16_shader3/raw/master/bs25_shader3.files/image129.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;9-CON </span>샘플링이 적용된 깊이 버퍼 그림자<span
lang=EN-US>. <a href="https://github.com/3dapi/dv16_shader3/raw/master/ht26_shadow2.zip">ht26_shadow2.zip</a>&gt;</span></p>
<br>
<br>

</div>

<?php
	include '../base/lc_tail.php';
?>
